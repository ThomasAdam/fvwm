Description of the menu position patch to 2-0-47d  (07-Oct-1998)
-------------------------------------------------

This patch allows to position menus created by the commands 'Menu', 'Popup'
and 'WindowList' anywhere on the screen or relative to the pointer, windows,
icons, titles, other menus etc. (and relative to buttons in the FvwmButtons
module when I have the time to implement this). There are some enhancements
to normal menus too (see 'Special Options') and a log of bugfixes.



I enhanced the syntax of said three commands to allow this:

  Menu  name [position hints] [double-click-action]
  Popup name [position hints]
  WindowList [position hints] [options] [double-click-action]



Basically placing a menu somewhere on the screen works like this:

  You specify a 'context rectangle' and the menu is placed relative to the
  coordinates of this rectangle. The most simple case is to use the root
  window, but it can be nearly any part of a window, icon or menu or can be
  given in absolute screen coordinates. The arguments 'x' and 'y' tell us now
  where the menu will be popped up in relation to the rectangle. It can be
  centered on the rectangle or moved in all directions by a fixed distance in
  pixels or depending on the rectangles size.



The syntax of the position hints is:

  [ [context-rectangle] x y ] [special-options]



The context rectangle:
----------------------
'context rectangle' can be one of the following or empty (default is 'mouse').

  root
    The root window.
  mouse
    A rectangle 1 pixel hight and 1 pixel wide at the position of the pointer.
  window
    The active window.
  interior
    The client part of the active window.
  title
    The title of the active window or icon.
  button#
    The button of the active window (# is it's number and can be 0 ro 9).
  icon
    An icon. This does not make much sense if the window isn't iconized.
  menu
    The active menu.
  item
    The selected item of the active menu.
  context
    This is equivalent to either 'window', 'icon' or 'menu' depending on what
    is active at the moment.
  rectangle <geometry>
    A rectangle described by <geometry>. This is in standard X geometry format
    relative to the screen. All four values must be given (x, y, width and
    height).
  this
    Whatever widget the mouse is over. May be one of the previous or even the
    borders and corners of a window.

NOTE: Some of these values may not make sense although they are not forbidden.
      You can refer to an icon from a press on the title bar, but the result
      will probably not be what you want. If for some reason the referred
      object does not exist 'mouse' is used instead.



The parameters x and y:
-----------------------
With x and y you can specify where the menu should apper inside or outside of
the reference rectangle. The syntax of these two is:

  [c][+n|-n][p]

NOTE: This string must not be completely empty.

'c' and 'p' are literal characters whereas 'n' is a positive integer.

  'c+n' or 'c-n' or just 'c':
    Center the menu around the center of the rectangle (e.g. c+10) and move
    by n (pixels or percent, see below).

  '+n' without 'c':
    Put the top/left of the menu over the top/left of the rectangle and then
    move by n down/right.

  '-n' without 'c':
    Put the bottom/right of the menu over the bottom/right of the rectangle and
    then move by n up/left.

If 'p' is not given, n specifies the percentage of the rectangle's size, with
'p' n is the distance in pixels.



Examples:
---------
To put the Windowlist in the center of the screen:

  WindowList root c c
    or
  Windowlist root c+0 c+0

A menu 8 pixels above the mouse pointer:

  Popup name mouse c -8p

... to the left of a window:

  Menu name window -100 c+0 Nop

A menu right of and centered vertically around a menu item (this saves a lot of
space)...

  AddToMenu foobar-menu "first item" Nop
  + "special item" Popup "another menu" item +100 c
  + "last item" Nop

... or even *above* the first item

  AddToMenu foobar-menu "first item" Popup "another menu" +0 -100
  + "another item" Nop
  + "last item" Nop

A menu centered around whatever you click on:

  Menu name this c c

... or dropping from the left half of the title bar:

  Popup name title c-25 +100

... or with the bottom-right corner in the center of the screen (assuming
that your screen is 1024x768):

  Menu name rectangle 512x384 -0 -0


Further considerations (the special options):
---------------------------------------------
There are a few issues with position hints for menus you might want to
consider:

  You can put a submenu far off the current menu so you can't reach it with the
  mouse without popping it down (fvwm menu style). But if you leave the current
  menu in the general direction of the submenu it will stay up (e.g. if the
  submenu is far to the right, leaving the menu on the right side will not pop
  the submenu down, but leaving it to the left will).

  The 'animated' and 'mwm/win' menu styles may move a menu somewhere else on
  the screen. If you do not want this you can add 'Fixed' as a special option
  (see below). This might happen for example if you want the menu *always* in
  the top right corner of the screen.

  Where do you want a submenu appear when you click on it's menu item? The
  default is to place the title under the cursor, but if you want it where the
  position hints say, use the 'SelectInPlace' special option. If you want the
  pointer on the title of the menu, use 'SelectWarp' too.

  The pointer is warped to the title of a submenu whenever the pointer would be
  on an item when the submenu is popped up (fvwm style) or never warped to the
  title at all with mwm/win menu style. You can force/forbid warping to the
  title whenever the submenu is opened with the 'NoWarp' and 'WarpTitle'
  special options.

NOTE: The special options *do* work with a normal menu that has no other
      position hints too.



Summary of special options:
---------------------------
  NoWarp           Never warp to the title of a submenu.
  WarpTitle        Always warp to the title of a submenu.
  SelectWarp       Warp to the title of a submenu when selected.
  SelectInPlace    Honour position hints when item is selected.
  Fixed            Do not move this menu when popping up.



Some comments on warping:
-------------------------

There are a few changes in the patch in when the pointer is warped to an item
or title of a menu. In general the pointer is warped to the title of any menu
if it would be over an item when the menu pops up execept if the menu is a
root menu and the MWM or WIN menu style is used (in this case it stays where
it is). This is a small change to the fvwm menu style since before the pointer
was warped to the center of the title even if it was already on the title
sometimes (when the menu was clipped to the screen if it exceeded the lower
border). This style of warping has been enabled for MWM/WIN submenus too since
it did't work well before.



These bugs in 2.0.47d have been fixed in the menu positioning patch:
--------------------------------------------------------------------

 - Coredump that occurs when <return> is pressed but the pointer isn't
   in any menu.

 - Fixed coredump that occurs when a submenu that should be popped up
   doesn't exist.
 
 - If you pop up a menu with the mouse, open some submenus with <return>
   and then press <left>, the pointer returns to the place where it was
   when the first menu was opened with <return>.

 - If you pop up a menu with a keypress and open some submenus with <return>
   and then press <left>, the pointer jumps around the screen before it
   finally returns where it was when the first menu was opened.

 - When the pointer is warped into a menu title and you press <right>,
   the pointer moves two pixels down.

 - With the mwm plus anim meny style it is possible that a submenu is
   animated to the right and then pops down. The submenu now pops down
   immediately in this situation.

 - Menus do not use the lowest two pixels of the screen.

 - When you have a very long menu with three or more continuations it is
   possible that one of the menus remains mapped after the whole menu has
   been closed. This can happen near the right border of the screen when
   moving the pointer from a menu to the prior menu of it's prior menu
   (mwm MenuStyle without animation).

 - The old syntax of 'Menu' as documented in the manpage doesn't permit
   that the 'double-click-action' is left empty. However, it is OK in the
   code although an error message is written to stderr. I removed this
   message so you can safely omit 'double-click-action'.

 - The FindEntry() function accepts NULL as input according to the
   documentation but coredumps if you do. It works as documented now.

 - The pointer flickers to the center of a menu item before warping to
   the previous menu after hitting the <left> key in a submenu.

 - Empty menu entries can be added with lines like 'AddToMenu foo' or '+',
   but the menu does not really work (with keys). To avoid this a separator
   is inserted instead.

 - There is some potential risk of coredumping with the previous bug should
   a caller of AddMenuItem ever expect that an item is added even if it is
   NULL. This is implicitly fixed with the prior bugfix.

 - Fixed a type warning for GetOneArgument in builtins.c. This would cause
   problems if int and long are of different size.

 - Doubleclicking a menu near the lower edge of the screen executes the action
   under the pointer and then executes the default action. The correct
   behaviour is to just do the doubleclick action.

 - A memory leak in the do_windowlist function. The string after the 'Desk'
   option is malloced but never freed again.

 - Several possible buffer overflows in do_windowlist. The variables could
   possibly overflow under certain circumstances (e.g. with the 'Function'
   option if the function name is really long, say 80 characters).

 - The GetToken functin from the lib (Parse.c) is buggy. It does not handle
   quoted strings in a sensible way but returns some random string. It is
   used only in Parse.c, windows.c and builtins.c so I rewrote the places
   where it occurs with 'GetNextToken' and put '#if 0' around GetToken.
   GetToken must either be rewritten or removed completely. The current code
   fails rather ungracefully.

 - If a root menu has been opened with a keypress and is closed with <left>
   the pointer is not warped back to where it started as it is when <esc>
   is used.
+++
 - AddToMenu ... ... Title adds the title to the end of a menu instead
   of to the front. Furthermore it is possible to have multiple titles.
   I patched the AddToMenu function in menus.c so that the title is always
   inserted at the top position. You can even replace the title with a new
   one (e.g. if you have a menu built from command output and the command
   takes several seconds to execute, you could give it the title
   'building menu... please wait' and replace it with the real title
   afterwards).

 - Integrated patch for DestroyMenu bug.

 - Changed syntax of Prev, Next, None and Current to use parentheses
   to separate the options. The old syntax with brackets is still
   supported. Updated the manpage to reflect this.

 - Various cordeumps and other problems in FvwmPager.

 - FvwmButtons did not accept Tokens like "foo""bar".

 - Various coredumps and memory leaks in FvwmButtons (parsing problems).

 - Fixed "RaiseLower" bug (window is not raised if only the title is
   obscured).


Other enhancements in the patch:
--------------------------------

 - There is a tolerance of three pixels of overlapping allowed before menu
   animation or repositioning happens. This avoids animation for very
   little gain.

 - Hitting <up/down> at the beginning/end of a menu wraps the cursor to the
   other end.

 - Hitting a key to open a 'Menu' twice triggers the doubleclick-action.

 - The WindowList command supports a 'double-click-action' too. It has to be
   added after the options and must be quoted if it is not a single word.

 - Double keypresses are only activated if there is indeed a double-click-
   action defined.
+++
 - Added MoveToPage and MoveToDesk (as a synonym for WindowsDesk).
   See manpage for details.

 - Cleaned up parsing for WindowsDesk and Desk.

 - Wrote a new function to help parsing numeric arguments in Parse.c.
   (GetIntegerArguments);

 - Sorted some entries in the manpage alphabetically that were not in
   the right order (DestroyFunc and AddToFunc).

 - Integrated my FvwmPager patch (+ bugfixes).

 - Improved GetNextToken. All kinds of quoting are supported now
   (", ', ` and \).

 - New functions GetTokenIndex and GetNextTokenIndex in library for
   ease of parsing. They provide the functionality to match a token
   in a list of strings.

 - Added $d to 'Function' parsing (like $w, but inserts desk number).
   see TO-DO file.

 - Added BUGS section to FvwmCpp manpage.

 - Added XResource.c to library to simplify parsing of various resources
   (config file, X resources, commandline) for modules.

 - When moving/resizing a window you can abort the operation with any
   button pres if it was not started by a keypress (i.e. by a button press).
   Very handy for people like me who drag titles accidentally when trying
   to raise the window.

 - Moved function WaitForButtonsUp from menus.c to misc.c where it belongs.

Bugfixes and enhancements to the first version of the patch:
------------------------------------------------------------

 - Some cleanup work has been done.

 - A coredump with a combination of mouse movement and <left> has been
   fixed.

 - Fixed problem with fast menu keypresses (the selected action was no
   longer executed).
+++
 - Fixed parsing trouble with SetGlobalOptions.

 - Full description in the manpage.


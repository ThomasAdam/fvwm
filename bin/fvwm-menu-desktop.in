#!@PYTHON@
 
# Modification History

# Changed on 01/26/12 by Dan Espen (dane):
# Make compatible with fvwm-menu-desktop.
# Restored DestroyMenu, needed for reload menus.
# Remove bug, was printing iconpath on converted icons
# Replace obsolete optparse, use getopt instead
# Change from command line arg for applications.menu
# change to using ?$XDG_MENU_PREFIX or theme? fixme
# - use "Exec exec" for all commands, remove option.

# fixme, fix documentation, FvwmForm-Desktop, usage prompt is wrong
# change, mini icons are enabled by default.
# there are rescalable icons.
# themes not working: "hicolor" is a required theme  I see lots of themes but none seem to affect much


# Author: Piotr Zielinski (http://www.cl.cam.ac.uk/~pz215/)
# Licence: GPL 2
# Date: 03.12.2005

# This script takes names of menu files conforming to the XDG Desktop
# Menu Specification, and outputs their FVWM equivalents to the
# standard output.
#
#   http://standards.freedesktop.org/menu-spec/latest/

# This script requires the python-xdg module, which in Debian can be
# installed by typing
#
#   apt-get install python-xdg
#
# On Fedora, python-xdg is installed by default.

import sys
import getopt
import xdg.Menu
import xdg.IconTheme
import xdg.Locale
import os.path
import os
from xdg.DesktopEntry import *
import fnmatch


def main ():

    description = """
Generate Fvwm Menu from xdg files.
Standard output is a series Fvwm commands."""

    obs_args=['check-app',
              'enable-style',
              'enable-tran-style',
              'fvwm-icons',
              'kde_config',
              'mini-icon-path',
              'merge-user-menu',
              'su_gui',
              'utf8',
              'wm-icons']
    dashed_obs_args=[]
    for a in obs_args :
        dashed_obs_args.append('--'+a)

    obs_parms=['check-icons',
               'check-mini-icon',
               'destroy-type',
               'dir',
               'fvwmgtk-alias',
               'icon-app',
               'icon-folder',
               'icon-style',
               'icon-title',
               'icon-toptitle',
               'icons-path',
               'lang',
               'menu-style',
               'name',
               'png-icons-path',
               'submenu-name-prefix',
               'time-limit',
               'tran-icons-path',
               'tran-mini-icons-path',
               'type',
               'uniconv-exec',
               'uniconv',
               'xterm']
    equaled_obs_parms=[]
    for a in obs_parms :
        equaled_obs_parms.append(a+'=')
    dashed_obs_parms=[]
    for a in obs_parms :
        dashed_obs_parms.append('--'+a)

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hs:t:vw",
                                   ["help", "verbose", "enable-mini-icons", "with-titles", "verbose",
                                    "desktop=", "size=", "theme=", "install-prefix=", "menu-type=", "title="]+obs_args+equaled_obs_parms)
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        print usage
        sys.exit(2)
    global verbose, force, size, theme, icon_dir, top, install_prefix, menu_type, with_titles, menu_entry_count
    verbose = False
    force = False
    desktop=''
    size=24
    theme='gnome'
    icon_dir="~/.fvwm/icons"
    top='FvwmMenu'
    install_prefix = ''
    menu_type = ''
    with_titles = False
    menu_entry_count = 0

    for o, a in opts:
        if o == "-v":
            verbose = True
        elif o in ("-h", "--help") :
            print usage
            sys.exit()
        elif o in ("--enable-mini-icons") :
            force=True
        elif o in ("--desktop") :
            desktop=a
        elif o in ("--title") :
            top=a
        elif o in ("--install-prefix") :
            if a and not os.path.isabs(a):
                assert False, "install-prefix must be an absolute path"
            # add trailing slash if not there already
            if not a[-1] == '/' : # trailing slash
                a=a + '/'
            install_prefix = a

        elif o in ("-s","--size") :
            size = int(a)
        elif o in ("--theme") :
            theme = a
        elif o in ("--menu-type") :
            menu_type = a
        elif o in ("-w","--with-titles") :
            with_titles = True
        elif o in ("--verbose") :
            verbose = True
        elif o in (str(dashed_obs_args+dashed_obs_parms)) :
            # Ignore
            sys.stderr.write( "Warning: Arg "+o+" is obsolete and ignored\n" )
        else:
            assert False, "unhandled option"
            
    xdg_menu_prefix = (os.environ['XDG_MENU_PREFIX'] if os.environ.has_key('XDG_MENU_PREFIX') else '')

    # First check if no user presettings made
    if desktop == '':
        # check if $XDG_MENU_PREFIX is set
        if not xdg_menu_prefix == '':
            desktop = xdg_menu_prefix.replace('-', '').lower()
    
    vprint("Parameters for creating menu list:")
    vprint(" XDG_MENU_PREFIX:  \'%s\'" %xdg_menu_prefix)
    vprint(" --install-prefix: \'%s\'" %install_prefix)
    vprint(" --desktop:        \'%s\'" %desktop)
    vprint(" --menu-type:      \'%s\'" %menu_type)
    
    vprint("\nStart search ...")
    menulist, desktop_temp = getmenulist(desktop, menu_type)
    if not desktop_temp == '':
		desktop = desktop_temp

    vprint(" Menu list: %s" %menulist)
        
        
    if len(menulist) == 0:
        if not desktop == '':
            desktop = desktop + '-'
        sys.stderr.write(install_prefix+desktop+menu_type+".menu not available on this system. Exiting...\n")
        sys.exit(1)
    else:
        parsemenus(menulist, desktop)
             
def getmenulist(desktop, menu_type):
    menudict = {} 
    config_dirs = []
    if not install_prefix == '':
        config_dirs = [install_prefix]
    else:
        config_dirs = xdg_config_dirs # xdg_config_dirs is a built-in list from python-xdg

    for dir in config_dirs:
        if install_prefix == '':
            dir = os.path.join(dir, 'menus')
        # skipping all paths which not available
        if os.path.exists(dir):
            filelist = set([])
            dir_list = os.listdir(dir)
            pattern = '*'+desktop+'*'+menu_type+'*.menu'
            for filename in fnmatch.filter(dir_list, pattern):
                filelist.add(filename)
            
            # the menudict dictionary has a unsorted list (set) for the values.
            # set is easier to use then a list for removing items 
            menudict[dir] = filelist
            vprint(" found in %s: %s" %(dir, filelist))
    
    # remove all double menus in /etc/xdg/menus if they in user dir, too
    for path in menudict.keys():
        if not path == '/etc/xdg/menus':
            menudict['/etc/xdg/menus'] = menudict['/etc/xdg/menus'] - menudict[path]
    
    # sort menus related to desktops and create a weighting
    vprint("\n DE weighting search: DE => [user menus, system menus, overall]")
    desktop_dict = {}
    weight_dict = {}
    if desktop == '':
        # first the desktops, then debian (shouldn't appear in others) then others holding
        # all other non DE menus e.g. tools and at the end the nones without prefixes
        # If there're other prefixes from other WMs - should be added BEFORE debian
        DEs = ['gnome', 'kde', 'xfce', 'lxde', 'debian', 'others', 'none']
    else:
        DEs = [desktop]
    for de in DEs:
        menus = set([])
        user_menus = 0
        system_menus = 0
        filled = False
        for path in menudict.keys():
            if de == 'none':
                pattern = '*'
            elif de == 'others':
                pattern = '*-*'
            else:
                pattern = '*'+de+'*'
            # fnmatch.filter returns a list of files the pattern match
            menu_names = fnmatch.filter(menudict[path], pattern)
            if not len(menu_names) == 0:
                filled = True
            for name in menu_names:
                menus.add(path+'/'+name)
            # delete each found DE menu from the actual path. So, the menus will be reduced loop by loop.
            menudict[path] = menudict[path]-set(menu_names)
            # count the menus found in the users and systems menu path for later weighting
            if not path == '/etc/xdg/menus':
                user_menus = len(menu_names)
            else:
                system_menus = len(menu_names)
        if filled:
            desktop_dict[de] = menus
            filled = False
        # fill the weight dictionary with the counts
        weight_dict[de] = [user_menus, system_menus, user_menus+system_menus]
        vprint(" %s => %s" %(de, weight_dict[de]))

    # get the highest rated desktop
    highest = 0
    de_highest = ''
    for de in sorted(weight_dict.keys()):
        de_user = weight_dict[de][0]
        de_system = weight_dict[de][1]
        de_total = weight_dict[de][2]
        higher = False
        if not de_highest == '':
            highest_user = weight_dict[de_highest][0]
            highest_system = weight_dict[de_highest][1]
            highest_total = weight_dict[de_highest][2]
            # first compare the total counts
            if highest < de_total:
                higher = True
            elif highest == de_total:
                # if the totals equal compare the users
                if highest_user < de_user:
                    higher = True
                elif highest_user == de_user:
                    # it the users equal compare the system menus
                    if highest_system < de_system:
                        higher = True
                    # if the systems equal the last wins
                    elif highest_system == de_system:
                        higher = True # fixme, should be biunique. -but how? With atime?
        else:
            higher = True
            
        if higher:
            highest = de_total
            de_highest = de
    vprint( "\n Winner: %s" %de_highest)
    
    # Perhaps there're a global menus available which are not in the highest rated list
    if desktop_dict.has_key('none'):
        for menu in desktop_dict['none']:
            name = menu.replace('.menu', '').split('/')
            # the fnmatch.filter will be used to find NO match because then
            # the menu is not in the list
            found = fnmatch.filter(desktop_dict[de_highest], '*'+name[-1]+'*')
            if found == []:
                desktop_dict[de_highest].add(menu)
    
    # Add 'others' menus to list, because these could be tool menus like yast, etc
    if desktop_dict.has_key('others'):
        for menu in desktop_dict['others']:
            name = menu.replace('.menu', '').split('/')
            found = fnmatch.filter(desktop_dict[de_highest], '*'+name[-1]+'*')
            if found == []:
                desktop_dict[de_highest].add(menu)
            
    if len(desktop_dict) == 0:
        return [], ''
    else:
        return list(desktop_dict[de_highest]), de_highest

def vprint(text):
    if verbose:
        sys.stderr.write(text+"\n")
    
def printtext(text):
    print text.encode("utf-8")

def geticonfile(icon):
    iconpath = xdg.IconTheme.getIconPath(icon, size, theme, ["png", "xpm"])

    if not iconpath == None:
        extension = os.path.splitext(iconpath)[1]

    if not iconpath:
        return None

    if not force:
        return iconpath
    
    if iconpath.find("%ix%i" % (size, size)) >= 0: # ugly hack!!!
        return iconpath

    if not os.path.isdir(os.path.expanduser(icon_dir)):
        os.system("mkdir " + os.path.expanduser(icon_dir))

    iconfile = os.path.join(os.path.expanduser(icon_dir),
                            "%ix%i-" % (size, size) + 
                            os.path.basename(iconpath))

    if extension == '.svg':
        iconfile = iconfile.replace('.svg', '.png')

    os.system("if test \\( ! -f '%s' \\) -o \\( '%s' -nt '%s' \\) ; then convert '%s' -resize %i '%s' ; fi"% 
              (iconfile, iconpath, iconfile, iconpath, size, iconfile))
    return iconfile

    
def getdefaulticonfile(command):
    if command.startswith("Popup"):
        return geticonfile("gnome-fs-directory")
    else:
        return geticonfile("gnome-applications")    

def printmenu(name, icon, command):
    iconfile = ''
    if force :
        iconfile = geticonfile(icon) or getdefaulticonfile(command) or icon
        if not iconfile == '':
            iconfile = '%'+iconfile+'%'
    printtext('+ "%s%s" %s' % (name, iconfile, command))

def parsemenus(menulist, desktop):
    if len(menulist) == 1:
        # user defines only one special menu
        parsemenu(xdg.Menu.parse(menulist[0]), top)
    else:
        # create a top title list
        top_titles = []
        for file in menulist:
            name = file.replace('.menu', '').split('/')
            top_titles.append(name[-1][0].upper()+name[-1][1:])
        
        # create the submenus
        new_toptitles = []
        new_menulist = []
        for title, menu in zip(top_titles, menulist):
            name = 'Fvwm'+title
            vprint("Create submenu \'%s\' from \'%s\'" %(name, menu))
            parsemenu(xdg.Menu.parse(menu), name, title)
            # remove a menu if no menu entry was created in its sub menus
            if not menu_entry_count == 0:
                new_toptitles.append(title)
                new_menulist.append(menu)
            else:
                vprint(" Menu is empty - won't be used!")
        
        # create the root menu
        printtext('DestroyMenu "%s"' % top)
        if with_titles:
            printtext('AddToMenu "%s" "%s" Title' % (top, top))
        else:
            printtext('AddToMenu "%s"' % top)

        for title in sorted(new_toptitles):
            name = 'Fvwm'+title
            printmenu(title, '', 'Popup "%s"' % name)
    
def parsemenu(menu, name="", title=""):
    global menu_entry_count
    m = re.compile('%[A-Z]?', re.I) # Pattern for %A-Z (meant for %U)
    if not name :
        name = menu.getPath()
    if not title:
        title = name
    printtext('DestroyMenu "%s"' % name)
    if with_titles:
        printtext('AddToMenu "%s" "%s" Title' % (name, title))
    else:
        printtext('AddToMenu "%s"' % name)
    for entry in menu.getEntries():
    	if isinstance(entry, xdg.Menu.Menu):
            printmenu(entry.getName(), entry.getIcon(), 'Popup "%s"' % entry.getPath())
    	elif isinstance(entry, xdg.Menu.MenuEntry):
            desktop = DesktopEntry(entry.DesktopEntry.getFileName())
            # eliminate '%U' etc behind execute string
            execProgram = m.sub('', desktop.getExec())
            printmenu(desktop.getName(), desktop.getIcon(), "Exec exec " + " " + execProgram)
            menu_entry_count += 1
    	else:
    	    printtext('# not supported: ' + str(entry))
    printtext('')

    for entry in menu.getEntries():
    	if isinstance(entry, xdg.Menu.Menu):
    	    parsemenu(entry)

    if (re.search('.*System Tools$',name)) : # fixme, find a better way to do this?
        printmenu("Regenerate Applications Menu", "", "FvwmForm " "FvwmForm-Desktop" )

usage="""
A script which parses xdg menu definitions to build
the corresponding fvwm menus.

Usage: $0 [OPTIONS]
Options:
    -h, --help                show this help and exit
    --version                 show version and exit
    --install-prefix DIR      install prefix of the desktop menu files. Per default not set.
                              For the system wide menus use /etc/xdg/menus/
    --desktop NAME            desktop name to build menus for:
                              gnome, kde, xfce, lxde, debian, etc.
    --menu-type NAME          applications (default), settings, preferences, etc.
    --theme NAME              gnome (default), oxygen, etc. Don't use hicolor. 
                              It's the default fallback theme if no icon will be found.
    -w, --with-titles         generate menus with titles.
    --enable-mini-icons       enable mini-icons in menu
    -s, --size                set size of mini-icons in menu. Default is 24.
    --title NAME              menu title of the top menu used by Popup command.
                              Default is FvwmMenu
    -v, --verbose             run and display debug info on STDERR"""

if __name__ == "__main__":
    main()

# Local Variables:
# mode: python
# compile-command: "python fvwm-menu-desktop.in --enable-mini-icons --with-titles"
# End:

.\" Automatically generated by Pod::Man version 1.02
.\" Sat Aug 25 03:47:47 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "FVWM-MENU-DIRECTORY 1"
.TH FVWM-MENU-DIRECTORY 1 "perl v5.6.0" "2001-08-25" "Fvwm Utility"
.UC
.SH "NAME"
fvwm-menu-directory \- builds a directory browsing menu for \s-1FVWM\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBfvwm-menu-directory\fR
[ \fB\*(--help\fR|\fB\-h\fR ]
[ \fB\*(--version\fR|\fB\-v\fR ]
[ \fB\*(--name\fR|\fB\-na\fR \s-1NAME\s0 ]
[ \fB\*(--title\fR|\fB\-t\fR \s-1NAME\s0 ]
[ \fB\*(--item\fR|\fB\-it\fR \s-1NAME\s0 ]
[ \fB\*(--icon-title\fR|\fB\-icon-t\fR \s-1XPM\s0 ]
[ \fB\*(--icon-dir\fR|\fB\-icon-d\fR \s-1XPM\s0 ]
[ \fB\*(--icon-file\fR|\fB\-icon-f\fR \s-1XPM\s0 ]
[ \fB\*(--icon-app\fR|\fB\-icon-a\fR \s-1XPM\s0 ]
[ \fB\*(--wm-icons\fR ]
[ \fB\*(--dir\fR|\fB\-d\fR \s-1NAME\s0 ]
[ \fB\*(--order\fR|\fB\-o\fR \s-1NUM\s0 ]
[ \fB\-\-[no]all\fR|\fB\-a\fR ]
[ \fB\-\-[no]links\fR|\fB\-l\fR ]
[ \fB\*(--xterm\fR|\fB\-x\fR \s-1CMD\s0 ]
[ \fB\*(--exec-title\fR|\fB\-exec-t\fR \s-1CMD\s0 ]
[ \fB\*(--exec-file\fR|\fB\-exec-f\fR \s-1CMD\s0 ]
[ \fB\*(--exec-app\fR|\fB\-exec-a\fR [\s-1CMD\s0] ]
[ \fB\*(--command-title\fR|\fB\-command-t\fR \s-1CMD\s0 ]
[ \fB\*(--command-file\fR|\fB\-command-f\fR \s-1CMD\s0 ]
[ \fB\*(--command-app\fR|\fB\-command-a\fR \s-1CMD\s0 ]
[ \fB\-\-[no]reuse\fR|\fB\-r\fR ]
[ \fB\-\-[no]check-subdirs\fR|\fB\-ch\fR ]
[ \fB\*(--special-dirs\fR|\fB\-s\fR [\s-1VALUE\s0] ]
[ \fB\-\-[no]memory-for-speed\fR|\fB\-mem\fR ]
[ \fB\*(--menu-style\fR|\fB\-men\fR \s-1NAME\s0 ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A perl script which provides an output to read in with PipeRead to build an
fvwm menu containing a directory listing. Almost everything can be configured.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\*(--help\fR    \- show the usage and exit
.PP
\&\fB\*(--version\fR \- show version and exit
.PP
\&\fB\*(--name=NAME\fR  \- menu name, used only with \-\-reuse, default is MenuBrowser
.PP
\&\fB\*(--title=NAME\fR \- menu title format, default is '%*\-40p' \- last 40 characters
of the current full path.
\s-1TAB\s0 can be specified as '\et', but in the .fvwm2rc you
should specify a double backslash or a real \s-1TAB\s0.
.PP
Format specifiers:
  \f(CW%d\fR \- the current directory name
  \f(CW%p\fR \- the current directory full path
.PP
These specifiers can receive an optional integer size, positive for right
adjusted string or negative for left adjusted, example: \f(CW%8x\fR; and optional
*num or *\-num, which means to leave only the first or last (if minus) num of
chars, the num must be greater than 3, since the striped part is replaced
with \*(L"...\*(R", example: %*30x. Both can be combined: %\-10*\-20x, this instructs to
get only the 20 last characters, but if the length is less then 10 \- to fill
with up to 10 spaces on the right.
.PP
\&\fB\*(--item=NAME\fR \- menu item format, default is '%n'. \s-1TAB\s0 and width modifiers
for \f(CW%n\fR, \f(CW%N\fR and \f(CW%s\fR can be specified as described in \fB\*(--title\fR above.
Note, specifying a non default format slows the script.
.PP
Format specifiers:
  \f(CW%n\fR \- file/dir name (without the path)
  \f(CW%N\fR \- file/dir name (full with the path)
  \f(CW%d\fR \- file/dir date (yyyy-mm-dd \s-1HH:MM:SS\s0)
  \f(CW%D\fR \- file/dir date (yyyy-mm-dd)
  \f(CW%s\fR \- file/dir size (in bytes)
  \f(CW%t\fR \- file/dir type (File|Dir |Link|Sock|Blck|Char|Pipe)
  \f(CW%T\fR \- file/dir type (F|D|L|S|B|C|P)
.PP
Example: \-\-title '%*\-40p\etDate, Type\etSize' \-\-item '%*40n\et%d \f(CW%t\fR\et%s'
.PP
\&\fB\*(--icon-title=XPM\fR \- menu title icon, default is no
.PP
\&\fB\*(--icon-dir=XPM\fR   \- menu dir   icon, default is no
.PP
\&\fB\*(--icon-file=XPM\fR  \- menu file  icon, default is no
.PP
\&\fB\*(--icon-app=XPM\fR   \- menu application icon, default is no
.PP
\&\fB\*(--wm-icons\fR \- define icon names suitable for use with wm-icons package.
Currently this is equivalent to: \-\-icon-title menu/folder-open.xpm \-\-icon-item
menu/file.xpm \-\-icon-dir menu/folder.xpm \-\-icon-app menu/utility.xpm.
.PP
\&\fB\*(--dir=NAME\fR \- starting dir, default is ${\s-1HOME-\s0.}
.PP
\&\fB\*(--order=NUM\fR \- \s-1NUM\s0 (\-6 .. 6), default is 5.
  1 \- do not sort,  2 \- dirs first, 3 \- files first
  4 \- sort by name, 5 \- dirs first, 6 \- files first
  Negative number represents reverse order.
.PP
\&\fB\-\-[no]all\fR \- show hidden files, like in 'ls \-A', default is \-\-noall
.PP
\&\fB\-\-[no]links\fR \- follow linked directories, default is \-\-nolinks
.PP
\&\fB\*(--xterm=CMD\fR \- X terminal call, default is 'xterm \-e'
.PP
\&\fB\*(--exec-title=CMD\fR \- an fvwm Exec command on directory title (usually the
shell), default is ${SHELL-/bin/sh}.
\&'\-' means no Exec command, i.e. Nop.
If the command is not started with '^' X terminal call is prepended.
The command is started in the currently browsed directory.
.PP
\&\fB\*(--exec-file=CMD\fR \- an fvwm Exec command on regular files,
default is ${EDITOR-vi}.
\&'\-' means no Exec command, i.e. Nop.
If the command is not started with '^' X terminal call is prepended.
The actual file name is appended to the command.
.PP
\&\fB\*(--exec-app[=CMD]\fR \- an fvwm Exec command on +x files, default is '\-',
which means the same command as on regular files. If no \s-1CMD\s0 is given,
it is assumed to be empty \- simply run the +x file.
If the command is not started with '^' X terminal call is prepended.
The actual file name is appended to the command.
.PP
\&\fB\*(--command-title=CMD\fR \- an fvwm command to execute on title.
If this option is not given (or \s-1CMD\s0 is '\-'), the \f(CW\*(C`\-\-exec\-title\*(C'\fR
is used instead.
In the \s-1CMD\s0, \f(CW%d\fR is substituted with the full directory path.
.PP
In fact, \-\-exec-title=tcsh is equivalent
to \-\-command-title='Exec cd \*(L"%d\*(R"; xterm \-e tcsh'
.PP
\&\fB\*(--command-file=CMD\fR \- an fvwm command to execute on regular files.
If this option is not given (or \s-1CMD\s0 is '\-'), the \f(CW\*(C`\-\-exec\-file\*(C'\fR
is used instead.
In the \s-1CMD\s0, \f(CW%f\fR is substituted with the full file path.
.PP
In fact, \-\-exec-file=vi is equivalent
to \-\-command-file='Exec xterm \-e vi \*(L"%f\*(R"'
.PP
\&\fB\*(--command-app=CMD\fR \- an fvwm command to execute on +x files.
If this option is not given (or \s-1CMD\s0 is '\-'), the \f(CW\*(C`\-\-command\-app\*(C'\fR
is used instead.
In the \s-1CMD\s0, \f(CW%f\fR is substituted with the full file path.
.PP
In fact, \-\-exec-app=^exec is equivalent
to \-\-command-app='Exec exec \*(L"%f\*(R"'
.PP
\&\fB\-\-[no]reuse\fR \- no pop-up menus, reuse the same menu, default is \-\-noreuse.
When you specify this option the Menu action is used, not Popup. Also,
the \-\-name parameter is not ignored, and \-\-dir parameter is ignored
if there is ~/.fvwm/.fvwm-menu-directory.dir file. This file is only created
or used with this option specified, it is the only solution for the current
fvwm menu state.
.PP
\&\fB\-\-[no]check-subdirs\fR \- check all subdirs for having execute (+x) permission
and replace \*(L"Popup\*(R"/\*(L"Menu\*(R" command with \*(L"Nop\*(R" for these without permissions.
This has a visual effect of disabling popup triangle in the subdirectory item.
The default is \-\-nocheck-subdirs, because: 1) enabling this slows a bit the
script, 2) with this option enabled, if no icons used and no dir/file separate
sorting used there is no way to know that the item is directory and not file.
.PP
\&\fB\*(--special-dirs\fR[=VALUE] \- add .. or ~ or / special directories according to
given optional value. Without with option these directories are not added.
Default value if not specified is \*(L"1,2\*(R". The value is comma separated ordered
special directory indexes, where 1 is parent directory, 2 is home directory,
3 is root directory. If minus is prepended to the value, special directories
are added at the bottom of menu instead of top. Value \*(L"0\*(R" or any bad value
is equivalent to non-specifying this option at all.
.PP
\&\fB\-\-[no]memory-for-speed\fR \- use speed optimization, i.e. use previously
created directory menus without destroying it when closed, default is
\&\-\-nomemory-for-speed
.PP
.Vb 2
\&    Warning: speed optimization takes up a lot of memory
\&    that is never free'd again while fvwm is running.
.Ve
\&\fB\*(--menu-style=NAME\fR \- assign MenuStyle \s-1NAME\s0 to the menus
.PP
Option parameters can be specified both using '=' and in the next argument.
Short options are ok if not ambiguous: \f(CW\*(C`\-a\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, \f(CW\*(C`\-icon\-f\*(C'\fR; but be
careful with short options, what is now unambiguous, can become ambiguous
in the next versions.
.SH "USAGE"
.IX Header "USAGE"
Put this into your fvwm configuration file to invoke the script:
.PP
.Vb 2
\&  AddToFunc FuncFvwmMenuDirectory
\&  + I PipeRead "fvwm-menu-directory -d '$0'"
.Ve
More complex example (the plus line is a one long line):
.PP
.Vb 2
\&  # AddToFunc FuncFvwmMenuDirectory
\&  # + I PipeRead "fvwm-menu-directory -d '$0' -x 'Eterm -g 80x40 -e' -a -l -o 6 --exec-app --exec-title 'tcsh -l' --exec-file 'vim -R' -t 'Go to: %d' --wm-icons"
.Ve
And put this in the menu from which you want to pop-up the directory menus:
.PP
.Vb 3
\&  AddToMenu SomeMenu MissingSubmenuFunction FuncFvwmMenuDirectory
\&  + "Home Directory"  Popup $[HOME]
\&  + "Httpd Directory" Popup /home/httpd
.Ve
Note: please use absolute path names.
.PP
It is a good idea to set the menu pop-up delay to something positive
and enable busy cursor
.PP
.Vb 2
\&  MenuStyle * PopupDelayed, PopupDelay 200
\&  BusyCursor DynamicMenu True
.Ve
in your configuration file when using this script for better results.
.PP
Another interesting usage (\f(CW\*(C`\-\-reuse\*(C'\fR or \f(CW\*(C`\-r\*(C'\fR is mandatary for this):
.PP
.Vb 3
\&  AddToMenu MenuBrowser
\&  + DynamicPopupAction Piperead "fvwm-menu-directory -r -na MenuBrowser -d / -s"
\&  AddToMenu SomeMenu "My Browser" Menu MenuBrowser
.Ve
Here \f(CW\*(C`\-\-dir\*(C'\fR starting parameter is ignored if there is
~/.fvwm/.fvwm-menu-directory.dir file, you can delete it.
.SH "AUTHORS"
.IX Header "AUTHORS"
Inspired  on 1999\-06\-07 by Dominik Vogt     <domivogt@fvwm.org>.
.PP
Rewritten on 1999\-08\-05 by Mikhael Goikhman <migo@homemail.com>.
.SH "COPYING"
.IX Header "COPYING"
The script is distributed by the same terms as fvwm itself.
See \s-1GNU\s0 General Public License for details.
.SH "BUGS"
.IX Header "BUGS"
Report bugs to fvwm-bug@fvwm.org.

.\" Automatically generated by Pod::Man version 1.02
.\" Sun Jun  2 23:40:01 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "FVWM-MENU-HEADLINES 1"
.TH FVWM-MENU-HEADLINES 1 "perl v5.6.0" "2002-06-02" "FVWM Utilities"
.UC
.SH "NAME"
fvwm-menu-headlines \- builds headlines menu definition for \s-1FVWM\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBfvwm-menu-headlines\fR
[ \fB\*(--help\fR|\fB\-h\fR ]
[ \fB\*(--version\fR|\fB\-v\fR ]
[ \fB\*(--info\fR [site] ]
[ \fB\*(--site\fR|\fB\-s\fR site ]
[ \fB\*(--name\fR|\fB\-n\fR name ]
[ \fB\*(--title\fR|\fB\-t\fR title ]
[ \fB\*(--item\fR item ]
[ \fB\*(--exec\fR|\fB\-e\fR exec-command ]
[ \fB\*(--command\fR|\fB\-e\fR fvwm-command ]
[ \fB\*(--icon-title\fR icon ]
[ \fB\*(--icon-item\fR icon ]
[ \fB\*(--icon-home\fR icon ]
[ \fB\*(--wm-icons\fR ]
[ \fB\*(--frontpage\fR [where] ]
[ \fB\*(--proxy\fR|\fB\-p\fR host:port ]
[ \fB\*(--file\fR [file] ]
[ \fB\*(--fake\fR [file] ]
[ \fB\*(--timeout\fR seconds ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This configurable perl script builds an fvwm menu definition for headlines
of popular news web sites: FreshMeat, Slashdot, LinuxToday, LinuxApps,
DaemonNews, GNOME-News, KDE-News, RootPrompt,
LinuxFr, ThinkGeek and more.
.PP
It is possible to specify a customized menu item format, change a command
(usually launching a browser) and add menu icons (there is a support for
the wm-icons package).
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\*(--help\fR    \- show the help and exit
.PP
\&\fB\*(--version\fR \- show the version and exit
.PP
\&\fB\*(--info\fR [site] \- if site name is given print the site specific info,
otherwise print all site names
.PP
\&\fB\*(--site\fR site \- defile a web site, headlines of which to show, this option
also can be used together with \-\-help to get new defaults.
Default site: freshmeat.
.PP
\&\fB\*(--name\fR, \fB\*(--title\fR, \fB\*(--icon\fR \- define menu name, menu title and menu icon
accordingly given in the following argument. Default is name
\&\*(L"MenuHeadlinesFreshmeat\*(R", title \*(L"Freshmeat Headlines\*(R" and no mini-icon
(equivalent to an empty icon argument).
.PP
\&\fB\*(--item\fR, \fB\*(--exec\fR \- define menu item or exec format in the following
argument (what is shown and what is executed when the item is chosen),
default is '%h\et(%[%Y-%m-%d \f(CW%H:\fR%M])'.
\&\s-1TAB\s0 can be specified as '\et', but in .fvwm2rc you should specify a double
backslash or a real \s-1TAB\s0.
.PP
Format specifiers for a headline entry:
  \f(CW%h\fR \- headline
  \f(CW%u\fR \- url
  \f(CW%d\fR \- date in native format
  %[strftime-argument-string] \- date, see \fIstrftime\fR\|(3)
    the date is represented accourding to the local time
  %{name} \- site-specific-named-value
  %(text) \- arbitrary text
.PP
These specifiers can receive an optional integer size, positive for right
adjusted string or negative for left adjusted, example: \f(CW%8x\fR; and optional
*num or *\-num, which means to leave only the first or last (if minus) num of
chars, the num must be greater than 3, since the striped part is replaced
with \*(L"...\*(R", example: %*30x. Both can be combined: %\-10*\-20x, this instructs to
get only the 20 last characters, but if the length is less then 10 \- to fill
with up to 10 spaces on the right.
.PP
\&\fB\*(--command\fR like \fB\*(--exec\fR above, but enables to specify any fvwm command,
for example, \*(L"Function FuncFvwmShowURL '%u'\*(R" not only Exec.
.PP
In fact, \-\-exec=\*(L"mozilla '%u'\*(R" is equivalent
to \-\-command=\*(L"Exec mozilla '%u'\*(R"
.PP
\&\fB\*(--icon-title\fR, \fB\*(--icon-item\fR, \fB\*(--icon-home\fR \- define menu icon for
title, regular item and home item respectively given in the following argument.
Default is no menu icons (equivalent to an empty icon argument).
.PP
\&\fB\*(--wm-icons\fR \- define icon names suitable for use with wm-icons package.
Currently this is equivalent to: \-\-icon-title '' \-\-icon-item
menu/information.xpm \-\-icon-home menu/home.xpm.
.PP
\&\fB\*(--frontpage\fR [where] \- show site fronpage item in the menu too. Optional
value can be used to specify where this item will be placed in the menu \-
\&'top' or 't', 'bottom' or 'b'.
.PP
\&\fB\*(--proxy\fR host[:port] \- define a proxy to use.
Example: \-\-proxy proxy.inter.net:3128
.PP
\&\fB\*(--file\fR [file] \- write the menu output to specified file. If no filename is
given with this option (or empty filename), the default filename
\&\s-1WORK_HOME/SITE\s0.menu is used. Without this option or with '\-'
filename, the menu output is written to standard output.
.PP
\&\fB\*(--fake\fR [file] \- don't connect to the host using \s-1HTTP\s0 protocol, instead,
read from \s-1WORK_HOME/SITE\s0.in file. The following reads input from
freshmeat.in (downloaded http://freshmeat.net/backend/recentnews.txt) and
saves output to segfault.menu (both files are in \s-1WORK_HOME\s0):
  fvwm-menu-headlines \-\-site freshmeat \-\-fake \-\-file
.PP
\&\fB\*(--timeout\fR seconds \- limit a line reading from a socket to this timeout,
the default timeout is 20 seconds.
.PP
\&\s-1WORK_HOME\s0 of this script is ~/.fvwm/.fvwm-menu-headlines.
It is created if needed.
.PP
Option parameters can be specified both using '=' and in the next argument.
Short options are ok if not ambiguous: \f(CW\*(C`\-h\*(C'\fR, \f(CW\*(C`\-t\*(C'\fR; but be careful with
short options, what is now unambiguous, can become ambiguous in the next
versions.
.SH "USAGE"
.IX Header "USAGE"
1. One of the ways to use this script is to define a crontab
entry to run the script every hour or so for every monitored site:
.PP
.Vb 3
\&  0,30 * * * * fvwm-menu-headlines --file --site freshmeat
\&  1,31 * * * * fvwm-menu-headlines --file --site linuxtoday
\&  2,32 * * * * fvwm-menu-headlines --file --site slashdot
.Ve
Then add these lines to your fvwm configuration file:
.PP
.Vb 3
\&  DestroyFunc FuncFvwmMenuHeadlines
\&  AddToFunc   FuncFvwmMenuHeadlines
\&  + I Read "$HOME/.fvwm/.fvwm-menu-headlines/$0.menu"
.Ve
.Vb 6
\&  DestroyMenu MenuHeadlines
\&  AddToMenu   MenuHeadlines "Headlines" Title
\&  + MissingSubmenuFunction FuncFvwmMenuHeadlines
\&  + "FreshMeat"  Popup freshmeat
\&  + "LinuxToday" Popup linuxtoday
\&  + "Slashdot"   Popup slashdot
.Ve
2. Another way to use this script (only if you have fast network/proxy) is to
run it every time you want to open your Headlines submenus.
(Note, the submenu that is once created is not reloaded, use \*(L"Reset all\*(R".)
.PP
In this case your fvwm configuration lines could be:
.PP
.Vb 3
\&  DestroyFunc FuncFvwmMenuHeadlines
\&  AddToFunc   FuncFvwmMenuHeadlines
\&  + I PipeRead "fvwm-menu-headlines --site $0"
.Ve
.Vb 10
\&  DestroyMenu MenuHeadlines
\&  AddToMenu   MenuHeadlines "Headlines" Title
\&  + MissingSubmenuFunction FuncFvwmMenuHeadlines
\&  + "FreshMeat"  Popup freshmeat
\&  + "Slashdot"   Popup slashdot
\&  + "LinuxToday" Popup linuxtoday
\&  + "GNOME News" Popup gnome-news
\&  + "KDE News"   Popup kde-news
\&  + "" Nop
\&  + "Reset all"  FuncResetHeadlines
.Ve
.Vb 7
\&  DestroyFunc FuncResetHeadlines
\&  AddToFunc   FuncResetHeadlines
\&  + I DestroyMenu freshmeat
\&  + I DestroyMenu linuxtoday
\&  + I DestroyMenu slashdot
\&  + I DestroyMenu gnome-news
\&  + I DestroyMenu kde-news
.Ve
And finally, add \*(L"Popup MenuHeadlines\*(R" somewhere.
.PP
3. Here is a usual usage. Use FvwmConsole or FvwmCommand to run fvwm commands
from a shell script. Every time you want headlines from some site, execute
(give any additional options if you want):
.PP
.Vb 3
\&  PipeRead "fvwm-menu-headlines --site newsforge --name MenuHeadlinesNewsForge"
\&  # this may take several seconds, you may use: BusyCursor Read true
\&  Popup MenuHeadlinesNewsForge
.Ve
.SH "HOW TO ADD SITE HEADLINES"
.IX Header "HOW TO ADD SITE HEADLINES"
It is possible to add user defined site headlines without touching the script
itself. Put your perl extensions to the file WORK_HOME/extension.pl.
For each site add something similar to:
.PP
.Vb 8
\&  $siteInfo->{'myslashdot'} = {
\&    'name' => "MySlashdot",
\&    'host' => "myslashdot.org",
\&    'path' => "/myslashdot.xml",
\&    'func' => \e&processMySlashdot,
\&    # the following string is only used in --info
\&    'flds' => 'time, title, department, topic, author, url',
\&  };
.Ve
.Vb 11
\&  sub processMySlashdot () {
\&    return processXml(
\&      'story',
\&      # mandatory 'h', 'u' and 'd' aliases or undef
\&      { 'h' => 'title', 'u' => 'url', 'd' => 'time' },
\&      sub ($) {  # convert 'd' string to (y, m, d, H, M, S)
\&        $_[0] =~ /(\ed+)-(\ed+)-(\ed+) (\ed+):(\ed+):(\ed+)/;
\&        ($1, ($2 || 0) - 1, $3, $4, $5, $6);
\&      }, +0,  # timezone offset; already in UTC
\&    );
\&  }
.Ve
.Vb 1
\&  1;
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
This script is inspired by WMHeadlines v1.3 by:
.PP
.Vb 2
\&  Jeff Meininger <jeffm@boxybutgood.com>
\&  (http://rive.boxybutgood.com/WMHeadlines/).
.Ve
Reimplemented for \s-1FVWM\s0 and heavily enhanced by:
.PP
.Vb 1
\&  Mikhael Goikhman <migo@homemail.com>, 16 Dec 1999.
.Ve
.SH "COPYING"
.IX Header "COPYING"
The script is distributed by the same terms as fvwm itself.
See \s-1GNU\s0 General Public License for details.
.SH "BUGS"
.IX Header "BUGS"
Report bugs to fvwm-bug@fvwm.org.

			Living with CVS and Autoconf
			----------------------------

These notes are intended for code developers.

All the derived files (the configure script, config.h.in, and all the
Makefile.in's) are checked into the repository.  Hence, you need to
know NOTHING about autoconf/automake to check out the sources and
build it.  NOR do you need to install these tools.  You can even hack
on the sources without these tools.

The ONLY time you need the tools is if you have to change a makefile or
the configure script.  Or if you want to build a tar file for
distribution.


Changing a Makefile
-------------------

First of all, NEVER edit anything named Makefile, or Makefile.in.  These
are both derived from the corresponding Makefile.am.  The most common
reason for editing is to change the list of sources. 

Steps: 1. edit foo/blah/Makefile.am
       2. re-run "make" from the top of the build directory

Step 2 will take care of rebuilding the Makefile.in and Makefile from your
changed Makefile.am.

Makefile.am has a simple format, basically:

        bin_PROGRAMS = fvwm2

        fvmw2_SOURCES = blah.c blah.h foo.c foo.h ...

Notice that you have to add all files, C-code *and* headers, to the
_SOURCES line.  This is vital, because this is the list of files that are
packed into the distribution.  If you leave one out, nobody will be able
to build the distributed tar file!

Changing configure.in
---------------------

The most common reason to do this is to change the version string.  If
you're editing it for any other reason, I will assume you know what you're
doing.

Steps: 1. edit configure.in, and find the line containing
          AM_INIT_AUTOMAKE(fvwm, x.y.z) at the top of the file
       2. change x.y.z to the new version string
       3. re-run "make" from the top of the build directory

Step 3 will take care of rebuilding the configure script, and usually all
the other Makefiles.


Building a distribution
-----------------------

By this, I mean the file "fvwm-x.y.z.tar.gz".

Steps: 1. make sure you have XPM and a C++ compiler
       2. configure with the flag --enable-extras
       3. make
       4. make distcheck
       5. ensure that you see the message 
          "fvwm-x.y.z.tar.gz ready for distribution"
          before uploading the tar file somewhere

One thing I've learned the hard way: 

        You have to configure with ALL THE OPTIONAL SUBDIRECTORIES
        in order to build a distribution!

In short: this means you need Xpm, and a C++ compiler, AND you have to
configure using the flag --enable-extras.  The reason for this is that a
couple of subdirectories are only built when using Xpm (xpmroot, for
example) or C++ (extras/FvwmConfig).  It is fine for end users to not
build these.  However, the distribution-maker has to have all the
directories enabled, else the files don't make it into the distribution
tar file. 

Similarly, you need to have actually built everything before packing the
distribution, hence step #3.  Among other things, this puts into the
Makefile.in's the proper dependency information. 

Step 4 will create the tar file, then unpack it and attempt a build &
install (to a scratch directory, not /usr/local).  This makes sure
that you really DID include all the files necessary to build the
package into the tar file. It may be hard to appreciate how useful
this is, until it has reminded you that you forgot file "foo.h" in
some _SOURCES line.  But trust me, it will save your bacon in this way
some day!




			Changes and Rearranges
			----------------------

Of historical interest only, here are some notes on the conversion to
GNU autoconf.  Some of this is outdated now, so don't rely too heavily
upon it.  For installation info, see INSTALL and INSTALL.fvwm.

The biggest change, of course, is that all traces of Imakefile stuff
is removed, replaced by all kinds of autoconf detrius.

In general: all the options formerly contained in the files Fvwm.tmpl
and configure.h got replaced by options to the "configure" script.
Hopefully the correspondence is clear: use "configure --help" for a
complete list of options.

I've not touched anything in the following subdirectories: docs and
icons.  None of that appears to be used in the current Imakefiles,
anyway.  I also didn't do anything with sample.fvwm2rc, so one has to
install that file by hand.

One change in behaviour is that the libraries Xpm, rplay, and readline
are probed for automatically & used if found.  If you have one of
these libraries installed but do NOT want to use it, you must
explicitly say so, using --without-lib-xpm or --without-lib-rplay.

Another class of changes was due to the fact that autoconf really
prefers to deal with manpages that end in '.1', rather than '.man'.


			Modules and Extras
			------------------

The "extra" modules are treated just like the regular ones, as far as
configuration goes.  However, by default, "make" will not recurse into
"extras".  The --enable-extras flag changes this behaviour.

The two exceptions to this are the fvwmperl and fvwmpython extras.
Being short of time, not to mention a bit lazy, nothing in these
directories are installed.  You'll have to copy them by hand (and edit
the interpreter path, if required).  I promise to fix this in the
future.

There are short notes at the top of all the extras/*/Makefile.am files
about what may have differed vis-a-vis the old Imakefiles.


			Changes to FVWM Sources
			-----------------------

Initially, I tried to keep the changes to source code proper to a
minimum.  There were a few minor changes required, and I did fix some
buglets.  After about version smr-2.0.46.3, however, I have been
fixing portability-related bugs in the code.

The old configure.h file was removed; in its place, the configure
script builds a file of the same name.  The new configure.h has
basically everything the old one did, plus a lot of what was in
Fvwm.tmpl.  You do not edit configure.h; instead, you select
appropriate options when running configure.  Use "configure --help"
to discover what these options are called.

All files must include <configure.h> *before* doing anything else.  I
had to change a few source files that violated this constraint.  I
didn't systematically check all sources, however, so there may be some
left to change.

The file version.h was removed.  It is now superfluous, since the
preprocessor symbol VERSION is now defined in configure.h.  All C
files had "#include <version.h>" removed.

A new file, lang-strings.h was created with all the language strings
found in the old configure.h.  Only one file (fvwm/decorations.c)
actually needs it; #include <lang-strings.h> was added there.

In short: with one exception, all the above changes to source were of
the form of rearranging includes.  The one exception was the
FvwmIconMan module, which re-defined the preprocessor symbol VERSION;
I changed that to a new symbol IM_VERSION.

The directory for the config file was changed from FVWMDIR to
FVWMCONFIG_DIR, in fvwm/read.c.

Four places in fvwm/builtins.c had a call to GetOneArgument with the
wrong kind of pointer as the second argument; these I fixed.



			Hacking Autoconfigured Source
			-----------------------------

To work on the autoconfigured fvwm sources, you need:

* GNU automake version 1.3b, available at ftp.cygnus.com:/pub/tromey
* GNU autoconf version 2.12, available from prep.ai.mit.edu and all
  mirror sites
* various tools, like a good M4 and sed to make these work

Once this is all in place, you should CD to the top of the source
directory, and do

	automake --foreign

This puts some extra rules in the generated makefiles, useful for
maintainers.  There are really two versions of Makefiles: those for
maintainers -- with extra rules -- and those for end users, which are
generated when a distribution is built.

The maintainer version of the makefiles include rules for
automatically tracking dependencies.  I think these will choke a
non-GNU make, but I'm not sure.  Let me know if this happens and I'll
update the file.  Automake's "--foreign" flag specifies that it does
not need to conform to all requirements that a "GNU" package would.

Now, as long as you don't do anything too drastic, you should be able
to just configure & build.  Any new source files (.c *OR* .h) must be
noted in the corresponding Makefile.am.  You should only edit
Makefile.am; in rare cases you may need to modify configure.in or
acconfig.h.  The rest of them are built.


			Building a Distribution
			-----------------------

The makefiles (both versions) have targets to build and check a
distribution: "dist" and "distcheck".

Building a distribution does three things: it packages the sources and
makefiles into a bundle (.tar.gz, by default, but zip's, and shar's
are also possible), it puts the source dependency info into the
Makefiles, and it removes some of the extra maintainer-mode rules.
This means it is possible to build fvwm using the distributed
makefiles with any brand of make.

The 'distcheck' target is a godsend for checking that the constructed
distribution is indeed sound.  Roughly, it takes the .tar.gz file
generated by "make dist", untars it, uses *those* files to do a
configure, build, and install.  Not to worry: it does the install into
temporary directories, not /usr/local/bin!

One thing I've learned the hard way: you have to configure with ALL
THE OPTIONAL SUBDIRECTORIES in order to build a distribution.  In
short: this means you need Xpm, and a C++ compiler, AND you have to
configure using both AND configure --enable-extras.  The reason for
this is: a couple of subdirectories are only built when using Xpm
(xpmroot, for example) or C++ (extras/FvwmConfig).  It is fine for end
users to not build these.  However, the distribution-maker has to have
all the directories enabled for the "make dist" to work.

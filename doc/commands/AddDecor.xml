<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "../docbook-xml/docbookx.dtd"
[
<!ENTITY % myents SYSTEM "../fvwm.ent" >
%myents;
]>

<!-- $Id: AddDecor.xml,v 1.1 2007/03/10 05:14:45 scott Exp $ -->

<section id='AddDecor'>
<title>AddDecor</title>

<command>
<cmdsynopsis>
    <arg choice='plain'>AddDecor</arg>
    <arg choice='opt'>decor</arg>
</cmdsynopsis>
</command>

<para>This command is deprecated and will be removed in the future.  There
are plans to replace it with a more flexible solution in fvwm-3.0.</para>

<para>Add or divert commands to the decor named
<emphasis remap='I'>decor</emphasis>.
A decor is a name given to the set of commands which affect button
styles, title-bar styles and border styles.  If
<emphasis remap='I'>decor</emphasis>
does not exist it is created; otherwise the existing
<emphasis remap='I'>decor</emphasis>
is modified.  Note: Earlier versions allowed to use the
<emphasis remap='B'>HilightColor</emphasis>, <emphasis remap='B'>HilightColorset</emphasis> and <emphasis remap='B'>WindowFont</emphasis>
commands in decors.  This is no longer possible.  Please use the
<emphasis remap='I'>Style</emphasis>
command with the
<emphasis remap='I'>Hilight...</emphasis> and <emphasis remap='I'>Font</emphasis>
options.</para>

<para>New decors start out exactly like the "default" decor without any
style definitions.  A given decor may be applied to a set of
windows with the
<emphasis remap='I'>UseDecor</emphasis>
option of the
<emphasis remap='B'>Style</emphasis>
command.  Modifying an existing decor affects all windows which
are currently assigned to it.</para>

<para><emphasis remap='B'>AddToDecor</emphasis>
is similar in usage to the
<emphasis remap='B'>AddToMenu</emphasis> and <emphasis remap='B'>AddToFunc</emphasis>
commands, except that menus and functions are replaced by
<emphasis remap='B'>ButtonStyle</emphasis>, <emphasis remap='B'>AddButtonStyle</emphasis>, <emphasis remap='B'>TitleStyle</emphasis>,
<emphasis remap='B'>AddTitleStyle</emphasis> and <emphasis remap='B'>BorderStyle</emphasis>
commands.  Decors created with
<emphasis remap='B'>AddToDecor</emphasis>
can be manipulated with
<emphasis remap='B'>ChangeDecor</emphasis>, <emphasis remap='B'>DestroyDecor</emphasis>, <emphasis remap='B'>UpdateDecor</emphasis>
and the
<emphasis remap='I'>UseDecor </emphasis><emphasis remap='B'>Style</emphasis>
option.</para>

<para>The following example creates a decor "FlatDecor" and style
"FlatStyle".  They are distinct entities:</para>

<programlisting>
<fvwmref cmd="AddToDecor"/> FlatDecor
+ <fvwmref cmd="ButtonStyle"/> <fvwmref cmd="All"/> \
    Active   (-- flat) \
    Inactive (-- flat)
+ <fvwmref cmd="TitleStyle"/>  -- flat
+ <fvwmref cmd="BorderStyle"/> -- HiddenHandles NoInset

<fvwmref cmd="Style"/> FlatStyle \
    UseDecor FlatDecor, HandleWidth 4, \
    ForeColor   white, BackColor   grey40, \
    HilightFore black, HilightBack grey70

<fvwmref cmd="Style"/> xterm UseStyle FlatStyle
</programlisting>

<para>An existing window's decor may be reassigned with
<emphasis remap='B'>ChangeDecor</emphasis>.
A decor can be destroyed with
<emphasis remap='B'>DestroyDecor</emphasis>.</para>

<programlisting>
<fvwmref cmd="DestroyDecor"/> FlatDecor
<fvwmref cmd="AddToDecor"/> FlatDecor ...

<fvwmref cmd="Style"/> FlatStyle UseDecor FlatDecor
</programlisting>

<para>and now apply the style again:</para>

<programlisting>
<fvwmref cmd="Style"/> xterm UseStyle FlatStyle
</programlisting>


</section>

#!/usr/bin/perl -w

use 5.003;
use strict;

use lib `fvwm-perllib dir`;
use FVWM::Module::Gtk;
init Gtk;

my $module = new FVWM::Module::Gtk(
	Name => "FvwmPerlGtkWinList",
	Mask => M_WINDOW_NAME | M_END_WINDOWLIST | M_STRING | M_ERROR,
);

my $dialog = new Gtk::Dialog;
$dialog->set_title("Window List");
$dialog->set_border_width(4);

my $smode = 'single';  # initial selection mode, may be changed by user
my $clist = new_with_titles Gtk::CList(" Id" . " " x 13, " Name" . " " x 20);
$clist->set_selection_mode($smode);
$clist->signal_connect("click_column", \&sort_list_by_column);
$dialog->vbox->add($clist);

my $creating_window_list = 0;
sub request_window_list () {
	$creating_window_list = 1;
	$clist->freeze;
	$clist->clear;
	$module->send("Send_WindowList");
}

sub do_command ($) {
	my $command = shift;
	foreach ($clist->selection) {
		$module->send($command, hex($clist->get_text($_, 0)));
	}
}

sub sort_list_by_column ($$) {
	my $clist = shift;
	my $column = shift;

	if ($column == $clist->sort_column()) {
		if ($clist->sort_type() eq 'ascending') {
			$clist->set_sort_type('descending');
		} else {
			$clist->set_sort_type('ascending');
		}
	} else {
		$clist->set_sort_column($column);
	}
	$clist->sort;
}

my $button = new Gtk::CheckButton "Enable multiple selection";
$dialog->vbox->add($button);
$button->signal_connect("clicked", sub { $clist->set_selection_mode(
	$smode = $smode eq 'multiple'? 'single': 'multiple'); });

my $hbox = new Gtk::HBox(1, 0);
$dialog->vbox->pack_end($hbox, 1, 1, 8);

$button = new Gtk::Button "Iconify";
$hbox->pack_start($button, 1, 1, 4);
$button->signal_connect("clicked", sub { do_command("Iconify"); });

$button = new Gtk::Button "WindowShade";
$hbox->pack_start($button, 1, 1, 4);
$button->signal_connect("clicked", sub { do_command("WindowShade"); });

$button = new Gtk::Button "Refresh";
$dialog->action_area->pack_start($button, 1, 1, 0);
$button->signal_connect("clicked", sub { request_window_list(); });
 
$button = new Gtk::Button "Quit";
$dialog->action_area->pack_start($button, 1, 1, 0);
$button->signal_connect("clicked", sub { Gtk->main_quit; });

$dialog->show_all;

$module->add_handler(M_WINDOW_NAME, sub {
	my ($self, $event) = @_;
	return unless $creating_window_list;
	$clist->append(sprintf("0x%07lx", $event->_win_id), $event->_name);
});

$module->add_handler(M_END_WINDOWLIST, sub {
	$creating_window_list = 0;
	$clist->thaw;
});

$module->add_handler(M_STRING, sub {
	my $string = $_[1]->_text;
	my $winid = $dialog->window->XWINDOW();
	if ($string =~ /^close|stop|quit|exit/i) {
		Gtk->exit(0);
	} elsif ($string =~ /^iconify|maximize|windowshade/i) {
		$module->send($string, $winid)
	} else {
		$module->open_error_dialog("Unsupported message: $string");
	}
});

$module->add_default_error_handler;

request_window_list();
$module->event_loop;

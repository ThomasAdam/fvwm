.\" Automatically generated by Pod::Man version 1.02
.\" Tue Apr 23 04:06:20 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "FVWMPERL 1"
.TH FVWMPERL 1 "perl v5.6.0" "2002-04-22" "FVWM Modules"
.UC
.SH "NAME"
FvwmPerl \- the \s-1FVWM\s0 perl manipulator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
FvwmPerl is spawned by \fIfvwm\fR\|(1), so no command line invocation will work.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is intended to extend fvwm commands with the perl scripting
power.  It enables to embed perl expressions in the fvwmrc files and
construct fvwm commands.
.SH "INVOCATION"
.IX Header "INVOCATION"
FvwmPerl may be invoked from a fvwmrc file.  If you want to invoke
the unique and persistent instanse of FvwmPerl, it is suggested to
do this from the \fIStartFunction\fR.  Calling it from the top is also
possible, but has several issues not discussed here.
.PP
.Vb 1
\&    AddToFunc StartFunction I Module FvwmPerl
.Ve
There are several command line switches:
.PP
\&\fBFvwmPerl\fR
[ \fB\*(--eval\fR line ]
[ \fB\*(--load\fR file ]
[ \fB\*(--preprocess\fR [ \fB\*(--quote\fR char ] [ \fB\*(--command\fR line ] [ file ] ]
[ \fB\*(--continue\fR ]
[ alias ]
.PP
Long switches may be abbreviated to short one-letter switches.
.PP
\&\fB\-e\fR|\fB\*(--eval\fR line \- evaluate the given perl code
.PP
\&\fB\-l\fR|\fB\*(--load\fR file \- evaluate perl code in the given file
.PP
\&\fB\-p\fR|\fB\*(--preprocess\fR file \- preprocess the given fvwmrc file
.PP
\&\fB\-c\fR|\fB\*(--command\fR line \- \s-1FVWM\s0 command to preprocess intead of file
.PP
\&\fB\-q\fR|\fB\*(--quote\fR char \- changes the default '%' quote
.PP
\&\fB\-s\fR|\fB\*(--stay\fR \- continues an execution after \fB\*(--eval\fR, \fB\*(--load\fR or
\&\fB\*(--preprocess\fR are processed.  By default, the module is not persistent
in this case, i.e. \fB\*(--nostay\fR is assumed.
.SH "ACTIONS"
.IX Header "ACTIONS"
There are several actions that FvwmPerl may perform:
.Ip "\fBeval\fR perl-code" 4
.IX Item "eval perl-code"
Evaluate a line of perl code.
.Sp
A special function \fBcommand(\fR\*(L"command\*(R"\fB)\fR may be used in perl code to send
back commands to fvwm.
.Sp
If perl code contains an error, it is printed to the standard error stream
and prepended with the \fI[FvwmPerl][eval]:\fR header.
.Ip "\fBload\fR file-name" 4
.IX Item "load file-name"
Load a file of perl code.
If the file is not fully qualified, it is searched in the user
directory \f(CW$FVWM_USERDIR\fR (usually ~/.fvwm) and the system wide
data directory \f(CW$FVWM_DATADIR\fR.
.Sp
A special function \fBcommand(\fR\*(L"command\*(R"\fB)\fR may be used in perl code to send
back commands to fvwm.
.Sp
If perl code contains an error, it is printed to the standard error stream
and prepended with the \fI[FvwmPerl][load]:\fR header.
.Ip "\fBpreprocess\fR [\-q|\-\-quote char] [\-c|\-\-command command] [file]" 4
.IX Item "preprocess [-q|--quote char] [-c|--command command] [file]"
Preprocess fvwmrc \fIfile\fR or \fIcommand\fR (one and only one of two should be
given) that may contain specially preformatted perl code.
Lines started with \fB%%\fR are perl code.  Text enclosed in \fB%{\fR ... \fB}%\fR
delimeters, that may start anywhere on the line and end anywhere on the same
or an other line, is perl code.
.Sp
The \fIquote\fR parameter changes delimeters of perl code.  If a single char
is given, like '@', the string \fB@@\fR is used at the start of lines
and \fB@{\fR ... \fB}@\fR anywhere.  If the given quote is 2 chars, like '<>',
the quoting strings are <> and <{ ... }>.
.Sp
The perl code is replaced with the output of its running.  The output
may be generated only using a special function \fBcommand(\fR\*(L"output\*(R"\fB)\fR.
.Sp
If any embedded perl code contains an error, it is printed to the standard
error stream and prepended with the \fI[FvwmPerl][preprocess]:\fR header.
.PP
These actions may be requested by one of 3 ways: 1) in the command line when
FvwmPerl is invoked (in this case FvwmPerl is short-lived unless \fB\*(--continue\fR
is also given), 2) by sending the corresponding message in fvwmrc using
SendToModule, 3) by calling the corresponding perl function in perl code.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
There are several functions that perl code may call:
.Ip "\fBcommand(\fR\fI$fvwmCommand\fR\fB)\fR" 4
.IX Item "command($fvwmCommand)"
In case of \fBeval\fR or \fBload\fR \- send back to fvwm a string \fI$fvwmCommand\fR.
In case of \fBpreprocess\fR \- append a string \fI$fvwmCommand\fR to the output of
the embedded perl code.
.Ip "\fBdoEval(\fR\fI$perlCode\fR\fB)\fR" 4
.IX Item "doEval($perlCode)"
This function is equivalent to the \fBeval\fR functionality
on the string \fI$perlCode\fR, described above.
.Ip "\fBload(\fR$fileName\fB)\fR" 4
.IX Item "load($fileName)"
This function is equivalent to the \fBload\fR functionality
on the file \f(CW$fileName\fR, described above.
.if n .Ip "\fBpreprocess(\fR\fI@params, [""""\-c \f(CI$command\fI""""] [$fileName]\fR\fB)\fR" 4
.el .Ip "\fBpreprocess(\fR\fI@params, [``\-c \f(CI$command\fI''] [$fileName]\fR\fB)\fR" 4
.IX Item "preprocess(@params, ["-c $command] [$fileName])"
This function is equivalent to the \fBpreprocess\fR functionality
with the given parameters and the file \f(CW$fileName\fR described above.
.SH "VARIABLES"
.IX Header "VARIABLES"
There are several global variable that may be used in perl code:
.PP
.Vb 3
\&    $a, $b, ... $h
\&    @a, @b, ... @h
\&    %a, %b, ... %h
.Ve
They all are initialized to the empty value and may be used to store a state
between different calls to FvwmPerl actions.
.PP
If you need more readable variable names, either write \*(L"no strict vars\*(R" at the
start of every perl code or use a hash for this, like:
.PP
.Vb 1
\&    $h{id} = $h{firstName} . " " . $h{secondName}
.Ve
There will be a configuration option to turn strictness on and off.
.SH "MESSAGES"
.IX Header "MESSAGES"
FvwmPerl may receive messages using the fvwm command SendToModule.
The names, meanings and parameters of the messages are the same as the
corresponding actions, described above.
.PP
Additionally, a message \fBstop\fR causes a module to quit.
A message \fBdump\fR dumps the contents of the changed variables.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
A simple test:
.PP
.Vb 6
\&    SendToModule FvwmPerl eval $h{dir} = $ENV{HOME}
\&    SendToModule FvwmPerl eval load($h{dir} . "/test.pl")
\&    SendToModule FvwmPerl load $[HOME]/test.pl
\&    SendToModule FvwmPerl preprocess fvwmrc.ppp
\&    SendToModule FvwmPerl dump %h @a
\&    SendToModule FvwmPerl stop
.Ve
The following example handles root backgrounds in fvwmrc.
All these commands may be added to StartFunction.
.PP
.Vb 1
\&    Module FvwmPerl
.Ve
.Vb 3
\&    # find all background pixmaps for a later use
\&    SendToModule FvwmPerl eval $a = $ENV{HOME} . "/bg"; \e
\&      opendir DIR, $a; @b = grep { /xpm$/ } readdir(DIR); closedir DIR
.Ve
.Vb 4
\&    # build a menu of background pixmaps
\&    AddToMenu MyBackgrounds "My Backgrounds" Title
\&    SendToModule FvwmPerl eval foreach $b (@b) \e
\&      { command("AddToMenu MyBackgrounds '$b' Exec fvwm-root $a/$b") }
.Ve
.Vb 3
\&    # choose a random background to load on start-up
\&    SendToModule FvwmPerl eval command("AddToFunc \e
\&      InitFunction + I Exec exec fvwm-root $a/" . $b[int(random(@b))])
.Ve
.SH "ESCAPING"
.IX Header "ESCAPING"
\&\fBSendToModule\fR just like any other fvwm commands expands several dollar
prefixed variables.  This may clash with the dollars perl uses.
You may avoid this by prefixing SendToModule with a leading dash.
The following 2 lines in each pair are equivalent:
.PP
.Vb 2
\&    SendToModule FvwmPerl eval $$d = "$[DISPLAY]"
\&    -SendToModule FvwmPerl eval $d = "$ENV{DISPLAY}"
.Ve
.Vb 2
\&    SendToModule FvwmPerl eval command("Echo desk=$d, display=$$d")
\&    SendToModule FvwmPerl preprocess -c Echo desk=%($d)%, display=%{$$d}%
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
FvwmPerl being written in perl and dealing with perl, follows the famous
perl motto: \*(L"There's more than one way to do it\*(R", so the choice is yours.
.PP
Here are more pairs of equivalent lines:
.PP
.Vb 2
\&    Module FvwmPerl --load "my.pl" --stay
\&    Module FvwmPerl -e 'load("my.pl")' -s
.Ve
.Vb 2
\&    SendToModule FvwmPerl preprocess my.ppp
\&    SendToModule FvwmPerl eval preprocess("-c", loadFile(my.ppp));
.Ve
Warning, you may affect the way FvwmPerl works by evaluating approprite
perl code, this is considered a feature not a bug.  But please don't do this,
write your own \s-1FVWM\s0 module in perl instead.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIfvwm\fR\|(1) man page describes all available commands.
.PP
Basically, in your perl code you may use any function or class method from
the perl library installed with \s-1FVWM\s0, see tha man pages of perl packages
\&\fBGeneral::FileSystem\fR, \fBGeneral::Parse\fR and \fB\s-1FVWM:\s0:Module\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mikhael Goikhman <migo@homemail.com>.

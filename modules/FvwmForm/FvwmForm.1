.\" Same macro as used in fvwm2.1
.de EX		\"Begin example
.ne 5
.if n .sp 1
.if t .sp .5
.nf
.in +.5i
..
.de EE
.fi
.in -.5i
.if n .sp 1
.if t .sp .5
..
.TH FvwmForm 2.0 "November 1988"
.SH NAME
FvwmForm - input form module for Fvwm
.SH SYNOPSIS
\fBModule FvwmForm\fP [ \fIAlias\fP ]

FvwmForm must be spawned by Fvwm.  
If invoked from the command line,
FvwmForm prints its version number and exits.
.SH DESCRIPTION
FvwmForm provides a mechanism to get user input and act accordingly.
This is achieved by means of a form that the user can fill out,
and from which the user can select actions he wants Fvwm to take.
A form consists of five types of items:
text labels, 
single-line text inputs,
mutually-exclusive selections,
multiple-choice selections,
and action buttons.
These items are arranged into several lines,
with a very flexible layout.

A text label only serves the purpose of explanation.
It cannot accept any input.

A text input field can be used to edit a single-line string.
FvwmForm accepts Emacs-style cursor movement keys.
No copying and pasting functions exist.

A selection consists of several choices.

The selection itself is a logical entity that doesn't have any display
feature.

Each choice is displayed as a push-button followed by a explanatory
text label.
When selected, an exclusive choice shows a circle in the middle,
while a multiple choice shows a check.

An action button, when activated sends one or more commands to
Fvwm or executes shell commands.
The shell commands can contain the content of the input fields
on the form and reflect the setting of choices on the form.

The action buttons can be activated thru keyboard or mouse.
.SH INITIALIZATION

FvwmForm invoked without an alias uses configuration
commands  starting with "*FvwmForm".

Normally you would invoke FvwmForm with
an alias representing the name of a form, its configuration commands and
configuration file.
For example, the command "Module FvwmForm Rlogin" uses configuration
commands starting with "*Rlogin", and reads the optional configuration file
".Rlogin".

All forms, regardless of alias,  scan first for configuration commands
that start with  "*FvwmFormDefaults".   These  commands  normally come
from the builtin form "FormFvwmForm" which saves commands to the file
".FvwmForm".

The physical reading of the optional input file, ".FvwmForm",
is done only the first time FvwmForm is invoked, or after
"FormFvwmForm" updates the file.

When the file ".FvwmForm" is read,  it is done  by sending the command
"Read .FvwmForm  Quiet"   to fvwm2.  Because of  the   way the  "read"
command works, the file can  reside in your  home directory, or be  in
the fvwm2 configuration directory.

Then FvwmForm reads the rest of the configuration fvwm2 has stored
up.  Fvwm2 stores configuration on an ongoing basis.  The initial
configuration comes from the .fvwm2rc file.  Other sources,
including "Read" commands can define a form.

When letting FvwmForm and fvwm2 read files, remember that these
files contain commands that can do things, so you should be careful
about setting permissions on these files.

When FvwmForm is invoked with a window context, e.g. from a window menu,
all commands it sends to Fvwm will have that window context.
This would allow FvwmForm to control the window it is invoked from.

After all the configuration commands have been read, FvwmForm displays
the form defined by the commands.

.SH DEFAULTS
FvwmForm creates a built-in form named "FormFvwmForm" that creates
a file called ".FvwmForm".  This file contains saved default form colors and
fonts.  Other forms use these defaults unless they are overridden within the
form.

The default creating form would normally be invoked from a "module menu".
For example, if you call your module menu "Module-Popup", you would
add the line:

AddToMenu "Module-Popup" "FvwmForm Defaults" FvwmForm FormFvwmForm

When you select "FvwmForm Defaults" from you module menu,
a form is displayed that shows the current defaults and allows you
to change them.  If you activate the "Save Restart Me" button,
the ".FvwmForm" file is written and "FormFvwmForm" exits and restarts
to show the new defaults.

An example of what this file might contain after a save is:
.EX
  # This file created by FvwmForm
  
  *FvwmFormDefaultFont 10x20
  *FvwmFormDefaultInputFont 8x13bold
  *FvwmFormDefaultButtonFont 10x20
  *FvwmFormDefaultFore white
  *FvwmFormDefaultBack cornflowerblue
  *FvwmFormDefaultItemFore green
  *FvwmFormDefaultItemBack gray40
.EE
The commands in this file are just like any other FvwmForm
command except that they start with "*FvwmFormDefault".

FvwmForm only reads the file ".FvwmForm" the first time it is started
or after the file is changed by "FormFvwmForm".  It does so
by sending the command "*FvwmFormDefaultRead x". With "x" set to "y" or
"n".  "n" makes FvwmForm send a "read .FvwmForm quiet" comamnd to fvwm.

.SH CONFIGURATION
The following commands can be set in the .fvwm2rc file or thru
any of the other ways that fvwm2 can accept commands.
Note that the string "FvwmForm" should be changed if FvwmForm is
invoked with an alias.

The order of the options DOES matter.
The first background text color, "*FvwmFormBack",
encountered before
a displayable item
sets the default
background color for the entire form.

Other than that, colors, fonts, text, choices and buttons
can be intermixed in any order.
The are no builtin limits on form size, number of items on
a form, or number of fonts or colors used.

.TP 4
.B *FvwmFormGrabServer
This option makes FvwmForm grab the mouse pointer on startup.
This feature is useful for things like logout verification.
.TP 4
.B *FvwmFormWarpPointer
This option makes FvwmForm warp the mouse pointer into its window on startup.
It saves the user some mouse-travelling.
.TP 4
.B *FvwmFormPosition \fIx\fP \fIy\fP
Puts the FvwmForm window at location (\fIx\fP, \fIy\fP) on the screen.
By convention, a negative \fIx\fP (resp. \fIy\fP) value measures
distance from the right (resp. bottom) of the screen.

If this option is omitted, FvwmForm starts at the center of the screen.
.TP 4
.B *FvwmFormBack \fIcolor\fP
Specifies the background color of the FvwmForm window
and any text in the window.
The first background color FvwmForm reads determines the overall
screen background color.
See DEFAULTS.
.TP 4
.B *FvwmFormFore \fIcolor\fP
Specifies the foreground color for displaying text labels.
See DEFAULTS.
.TP 4
.B *FvwmFormItemBack \fIcolor\fP
Specifies the background color for the text input windows, and
the buttons.
Buttons are displayed as 3D depressable buttons.
Inputs are displayed as 3D indented fields.
Medium shade background colors work best.
See DEFAULTS.
.TP 4
.B *FvwmFormItemFore \fIcolor\fP
Specifies the foreground color for the text input strings and button
text.
See DEFAULTS.
.TP 4
.B *FvwmFormFont \fIfont\fP
Specifies the font for displaying plain text.
See DEFAULTS.
.TP 4
.B *FvwmFormButtonFont \fIfont\fP
Specifies the font for text in the action buttons.
See DEFAULTS.
.TP 4
.B *FvwmFormInputfont \fIfont\fP
Specifies the font for text input.  This font must have fixed width.
See DEFAULTS.
.TP 4
.B *FvwmFormLine \fIjustification\fP
Starts a new line.
A line can contain any number of text, input, buttons and choice items.
A FvwmForm window can have any number of lines.
The width of the window is that of the longest line.

Justification of items in the line is specified by \fIjustification\fP,
which can be one of the following:
.TP 16
.B \fIleft\fP
Items are justified to the left of the window.
.TP 16
.B \fIright\fP
Items are justified to the right of the window.
.TP 16
.B \fIcenter\fP
Items are placed in the center of the window.
.TP 16
.B \fIexpand\fP
If there is only one item in the line, the item is centered in the window.
If two or more items are present, they are spreaded to fill the whole
width of the window.
.TP 4
.B *FvwmFormText "\fIstring\fP"
Displays \fIstring\fP as plain text.
Line breaks must be achieved by multiple *FvwmFormLine and *FvwmFormText
options.
Blanks may be used to provide extra padding between items.
.TP 4
.B *FvwmFormInput \fIname\fP \fIsize\fP "\fIinit_string\fP"
Specifies a text input item with name \fIname\fP.
A subwindow of \fIsize\fP characters in width is used for editting.
If \fIinit_string\fP is present, it is the initial string when
FvwmForm starts or resets itself.
The default initial string is "".
.TP 4
.B *FvwmFormSelection \fIname\fP \fItype\fP
This option starts a selection item with name \fIname\fP.
Its choices are specified in following configuration commands.
The option \fItype\fP is one of the following:
.TP 16
.B \fIsingle\fP
The selections are mutually exclusive.
.TP 16
.B \fImultiple\fP
This is a multiple-choice selection.
.TP 4
.B *FvwmFormChoice \fIname\fP \fIvalue\fP "on | off" "\fIstring\fP"
Specifies a choice for a preceeding selection.
The choice item has a \fIname\fP and a \fIvalue\fP these are used in
commands.  See *FvwmFormCommand.
The \fIstring\fP is displayed to the right of the choice button
as a label.

The choice assumes the specified initial state ("on" means selected)
when FvwmForm starts or resets.
If the selections are mutually exclusive,
FvwmForm does NOT detect inconsistencies in the initial states of the choices,
i.e. two or none of the choices can be selected.
However, once the user selects a choice,
FvwmForm  assures only one is selected.
.TP 4
.B *FvwmFormButton \fItype\fP "\fIstring\fP" [\fIkey\fP]
This option specifies an action button.
The button has \fIstring\fP as a label, 
and excutes a set of Fvwm \fIcommand\fP when it is activated.
The commands are the following *FvwmFormCommands.

The optional \fIkey\fP specifies a keyboard shortcut that activates
the button.
It is in either a control character, specified as ^@, ^A, ..., ^_,
or a function key, specified as F1, F2, ..., F35.
Control keys that are used for cursor movement in text input fields
cannot activate any buttons, with the exception of TAB, RETURN, LINEFEED,
which can activate a button when the cursor is in the last text input field.

The behavior of the button is determined by \fItype\fP:
.TP 16
continue
FvwmForm continues execution after sending the commands.
.TP 16
restart
After sending the commands, 
FvwmForm resets all the values to the initial ones,
and then continues execution.
.TP 16
quit
FvwmForm quits after sending the commands.
.TP 4
.B *FvwmFormCommand \fIcommand\fP
This option specifies an Fvwm command associated with the current button.
Commands that appear before any *FvwmFormButton option are executed
at start-up time.  This is usually a beep that gets the user's attention.

Commands starting with an exclamation mark (!) are executed by FvwmForm,
all other commands are sent to Fvwm for execution.
Before sending each command to Fvwm, FvwmForm recognizes variables of the
following forms, and supply values to them.
.TP 16
.B $(\fIname\fP)
If \fIname\fP corresponds to a text input field,
the result is the user's input string.
The special chars single-quote, double-quote and backslash
are preceded by a backslash.

If \fIname\fP corresponds to a choice,
the result is the value of the choice (as specified in *FvwmFormChoice)
if the choice is selected.
If the choice is not selected, the result is a blank string.

If \fIname\fP corresponds to a selection,
the result will be a list of the selected values of all its choices.
.TP 16
.B $(\fIname\fP?\fIstring\fP)
If \fIname\fP is a text input field and its value is not an empty string,
the result is \fIstring\fP,
with recursive variable substitution applied.
If the input value is empty, the result is empty.

If \fIname\fP is a choice and it is selected,
the result is \fIstring\fP,
with recursive variable substitution applied.
If the choice is not selected, the result is empty.
.TP 16
.B $(\fIname\fP!\fIstring\fP)
The same as the above, except that the converse conditions are taken.

.SH EXAMPLES
The following examples are automatically defined.
Use the following commands to create a menu to invoke
these examples:

.EX
AddToMenu Forms "QuitVerify" 	Module FvwmForm FormFvwmQuitVerify
AddToMenu Forms "Capture"    	Module FvwmForm FormFvwmCapture
AddToMenu Forms "Rlogin"     	Module FvwmForm FormFvwmRlogin
.EE
.SH EXAMPLE 1 - QuitVerify
This example simulates the mwm way of confirming logout.
Return does the logout, Escape cancels logout.
.EX
DestroyModuleConfig            FormFvwmQuitVerify*
*FormFvwmQuitVerifyGrabServer
*FormFvwmQuitVerifyWarpPointer
*FormFvwmQuitVerifyCommand     Beep
*FormFvwmQuitVerifyLine        center
*FormFvwmQuitVerifyText        "Do you really want to logout?"
*FormFvwmQuitVerifyLine        expand
*FormFvwmQuitVerifyButton      quit "Logout" ^M
*FormFvwmQuitVerifyCommand     Quit 
*FormFvwmQuitVerifyButton      quit "Cancel" ^[
*FormFvwmQuitVerifyCommand     Nop
.EE
.SH EXAMPLE 2 - Remote Login
This example lets the user type in a hostname, 
an optional user name,
and opens an xterm window from the remote host.
.EX
DestroyModuleConfig         FormFvwmRlogin*
*FormFvwmRloginWarpPointer
*FormFvwmRloginLine         center
*FormFvwmRloginText         "Login to Remote Host"
*FormFvwmRloginLine         center
*FormFvwmRloginText         "Host:"
*FormFvwmRloginInput        HostName        20      ""
*FormFvwmRloginLine         center
*FormFvwmRloginSelection    UserSel single
*FormFvwmRloginChoice       Default Default on      "same user"
*FormFvwmRloginChoice       Custom  Custom  off     "user:"
*FormFvwmRloginInput        UserName        10      ""
*FormFvwmRloginLine         expand
*FormFvwmRloginButton       quit    "Login"         ^M
*FormFvwmRloginCommand      Exec exec rsh $(Custom?-l $(UserName)) $(HostName) xterm -T xterm@$(HostName) -display $HOSTDISPLAY &
*FormFvwmRloginButton       restart "Clear"
*FormFvwmRloginButton       quit    "Cancel"        ^[
*FormFvwmRloginCommand      Nop
.EE
.SH EXAMPLE 3 - Capture Window
This example provides a front-end to xwd, xwud, and xpr.
.EX
# Capture Window - This example is a front-end to xwd, xwud, and xpr.
DestroyModuleConfig        FormFvwmCapture*
*FormFvwmCaptureLine       center
*FormFvwmCaptureText       "Capture Window"
*FormFvwmCaptureLine       left
*FormFvwmCaptureText       "File: "
*FormFvwmCaptureInput      file            25      "/tmp/Capture"
*FormFvwmCaptureLine       left
*FormFvwmCaptureText       "Printer: "
*FormFvwmCaptureInput      printer         20      "$PRINTER"
*FormFvwmCaptureLine       expand
*FormFvwmCaptureSelection  PtrType single
*FormFvwmCaptureChoice     PS      ps      on      "PostScript"
*FormFvwmCaptureChoice     Ljet    ljet    off     "HP LaserJet"
*FormFvwmCaptureLine       left
*FormFvwmCaptureText       "xwd options:"
*FormFvwmCaptureLine       expand
*FormFvwmCaptureSelection  Options multiple
*FormFvwmCaptureChoice     Brd     -nobdrs off     "No border"
*FormFvwmCaptureChoice     Frm     -frame  on      "With frame"
*FormFvwmCaptureChoice     XYZ     -xy     off     "XY format"
*FormFvwmCaptureLine       expand
*FormFvwmCaptureButton     continue        "Capture"       ^M
*FormFvwmCaptureCommand    Exec exec xwd -out $(file) $(Options) &
*FormFvwmCaptureButton     continue        "Preview"
*FormFvwmCaptureCommand    Exec exec xwud -in $(file) &
*FormFvwmCaptureButton     continue        "Print"
*FormFvwmCaptureCommand    Exec exec xpr -device $(PtrType) $(file) | lpr -P $(printer) &
*FormFvwmCaptureButton     quit            "Quit"
.EE
.SH BUGS AND LIMITATIONS
FvwmForm is a fairly simple method of providing input.
There is no input validation facility.
There is no builtin way of seeing errors generated by the commands
executed or sent to fvwm.  Depending on your setup, you would normally
find errors on your console.

Report bugs to the fvwm-workers list.
.SH COPYRIGHT
FvwmForm is original work of Thomas Zuwei Feng
(ztfeng@math.princeton.edu).

Copyright Feb 1995, Thomas Zuwei Feng.  No guarantees or warantees are
provided or implied in any way whatsoever.  Use this program at your own
risk.  Permission to use, modify, and redistribute this program is hereby
given, provided that this copyright is kept intact.

.SH CHANGES
During the fall of 1988, Dan Espen removed all form size limits,
added unlimited font and color changing, added form spacing control,
added config file reading, form defaults and the builtin form
for creating defaults, and synchronous command execution.
No additional copyright is imposed.

#!@PERL@ -w

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Filter this script to pod2man to get a man page:
#   pod2man -c "FVWM Module" FvwmDebug | nroff -man | less -e

require 5.003;
use strict;

BEGIN {
	use vars qw($prefix $datadir);
	$prefix = "@prefix@";
	$datadir = "@datadir@";
}

use lib "@FVWM_PERLLIBDIR@";
use FVWM::Module;

my $dumpArgs = 1;
my $logFile = undef;
my $logStream = \*STDERR;
my $mask = MAX_MSG_MASK;
my $xmask = MAX_XMSG_MASK;
my $sendConfigInfo = 0;
my $sendWindowList = 0;
my @moduleArgs = @ARGV;

my $options = {
	'args!'     => \$dumpArgs,
	'log=s'     => \$logFile,
	'm|mask=i'  => \$mask,
	'x|xmask=i' => \$xmask,
	'sc|send-configinfo' => \$sendConfigInfo,
	'sw|semd-windowlist' => \$sendWindowList,
};

my $module = new FVWM::Module(
	Name => "FvwmDebug",
	EnableOptions => $options,
#	Debug => 1,
);
$module->mask($mask);
$module->xmask($xmask);

$module->addHandler($mask, \&dumpEvent);
$module->addHandler($xmask | M_EXTENDED_MSG, \&dumpEvent);

if ($logFile) {
	# let's hope the system will close it automatically on exit
	open $logStream, ">$logFile";
}

$module->debug("argv = '" . join("', '", @moduleArgs) . "'\n");

$module->send("Send_ConfigInfo") if $sendConfigInfo;
$module->send("Send_WindowList") if $sendWindowList;

$module->eventLoop;

sub dumpEvent ($$) {
	my ($module, $event) = @_;

	my $argNames  = $event->argNames;
	my $argTypes  = $event->argTypes;
	my $argValues = $event->argValues;

	print $logStream $event->name, "\n";
	return unless $dumpArgs;

	my $i;
	for ($i = 0; $i < @$argNames; $i++) {
		my $name  = $argNames->[$i];
		my $type  = $argTypes->[$i];
		my $value = $argValues->[$i] || 0;

		my $text;
		if ($type == FVWM::EventNames::number) {
			$text = $value;
		} elsif ($type == FVWM::EventNames::bool) {
			$text = $value? "True": "False";
		} elsif ($type == FVWM::EventNames::window) {
			$text = sprintf("0x%07lx", $value);
		} elsif ($type == FVWM::EventNames::pixel) {
			$text = "rgb:" . join('/',
				sprintf("%06lx", $value) =~ /(..)(..)(..)/);
		} elsif ($type == FVWM::EventNames::string) {
			$text = qq("$value");
		} elsif ($type == FVWM::EventNames::wflags) {
			$text = qq([window flags are not supported yet]);
		} else {
			$text = qq([unsupported arg type $type] "$value");
		}

		my $nameLen = 12;
		$nameLen = int((length($name) + 5) / 6) * 6
			if length($name) > $nameLen;
		printf STDERR "\t%-${nameLen}s %s\n", $name, $text;
	}
}

__END__

# ----------------------------------------------------------------------------
# man page

=head1 NAME

FvwmDebug - the FVWM module debugger

=head1 SYNOPSIS

FvwmDebug should be spawned by fvwm(1) for normal functionality.

To run this module, place this command somewhere in the configuration:

  Module FvwmDebug

To stop this module, execute:

  KillModule FvwmDebug

=head1 DESCRIPTION

This module dumps all fvwm event information into standard error stream for
debugging purposes.

=head1 INVOCATION

There are several command line switches:

B<FvwmDebug>
[ B<--noargs> ]
[ B<--log> I<file> ]
[ B<--mask> I<mask> ]
[ B<--xmask> I<mask> ]
[ B<--send-configinfo> ]
[ B<--send-windowlist> ]

Long switches may be abbreviated to shorter switches.

B<-n>|B<--noargs> - do not print all event arguments, just event name.
B<--args> is the default.

B<-l>|B<--log> I<file> - specify the log file name instead of the standard
error stream. If the log file can't be open for writting, the default
standard error stream is used.

B<-m>|B<--mask> I<mask> - set the module mask

B<-x>|B<--xmask> I<mask> - set the module extended mask

B<-sc>|B<--send-configinfo> - send B<Send_ConfigInfo> command to I<fvwm>
on startup, this results in a lot of events received.

B<-sw>|B<--send-windowlist> - send B<Send_WindowList> command to I<fvwm>
on startup, this results in a lot of events received.

=head1 SEE ALSO

See L<FvwmGtkDebug>.

=head1 AUTHOR

Mikhael Goikhman <migo@homemail.com>.

=cut

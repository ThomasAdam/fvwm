.\" t
.\" @(#)fvwm.1	17/2/97
.de EX		\"Begin example
.ne 5
.if n .sp 1
.if t .sp .5
.nf
.in +.5i
..
.de EE
.fi
.in -.5i
.if n .sp 1
.if t .sp .5
..
.ta .3i .6i .9i 1.2i 1.5i 1.8i
.TH FvwmScript 1 "1 July 2001"
.UC
.SH NAME
FvwmScript - module to build graphic user interface
.SH SYNOPSIS
FvwmScript must be spawned by Fvwm.
It will not work from the command line.
.SH DESCRIPTION
FvwmScript is a module which allows to build many graphical
applications such as desktop accessories, button panel with pop up
menu, modal dialog... At the startup, FvwmScript reads
the file which is specified in the command line. This file contains the script.
This script is not included in the configuration file of Fvwm.

.SH INVOCATION
FvwmScript can be invoked by inserting the line `Module
FvwmScript name_of_script' in the .fvwmrc file.
The file "name_of_script" can start with a slash, in which case, it's
a fully qualified path, and the file is read.
If "name_of_script" does not start with a slash, FvwmScript will look
in a few different places.
If  the   .fvwmrc contained   the  command  line  `*FvwmScript: Path
path_of_the_script_directory', FvwmScript will try that directory.
If that doesn't work, FvwmScript tries the system configuration directory
and the user configuration directory as described under the "Read"
command in the fvwm2 man page.

The command to start FvwmScript can be placed on a line by itself,
if FvwmScript is to be spawned during
fvwm's initialization, or can be bound to a menu or mouse
button or keystroke to invoke it later.

.SH CONFIGURATION OPTIONS
The following commands can be placed in the .fvwm2rc file. They are used
only if the corresponding script commands are not used in the script.

.IP "*FvwmScript: DefaultFont \fIfont\fP"
Specifies the default font to be used. If not specified with this command
or in the script with the Font command, fixed font is assumed.

.IP "*FvwmScript: DefaultFore \fIcolor\fP"
Specifies the default foreground color to be used. If not specified with
this command or in the script with the ForeColor command, black is used.

.IP  "*FvwmScript: DefaultBack \fIcolor\fP"
Specifies the default background color to be used. If not specified with
this command or in the script with the BackColor command, grey85 is used.

.IP  "*FvwmScript: DefaultHilight \fIcolor\fP"
Specifies the default hilight color to be used. If not specified with
this command or in the script with the HilightColor command, grey100 is used.

.IP  "*FvwmScript: DefaultShadow \fIcolor\fP"
Specifies the default shadow color to be used. If not specified with this
command or in the script with the ShadowColor command, grey55 is used.

.IP "*FvwmScript: DefaultColorset \fIcolorset\fP"
Tells the module to use colorset \fIcolorset\fP as the default colorset.
Refer to the FvwmTheme man page for details about
colorsets.

.SH ANATOMY OF A SCRIPT
FvwmScript uses a particular programming language. A script is composed of
four parts. Heading contains general characteristics of the window and
default properties for all widgets. The second part contains
instructions whom are executed at the  startup of the script. The third
part contains periodic tasks which are executed every second. And the last
part contains the description of widgets.  A widget consists of eleven
types of items: text labels, single-line text inputs, radio buttons,
checkbox, push buttons, horizontal and vertical scrollbars, rectangles,
pop up menus, swallowexecs and mini scrollbars.
.SH HEADING OF A SCRIPT
The syntax is as follows:

.IP "WindowTitle \fIstring\fP"
This option sets the window title.

.IP "WindowSize \fIwidth height\fP"
This option sets window size. \fIwidth\fP and \fIheight\fP are numerical value.

.IP "WindowPosition \fIx y\fP"
This option sets window position. \fIx\fP and \fIy\fP are numerical value.

.IP "ForeColor {\fIcolor\fP}"
This option sets the default foreground color for all widgets.

.IP "BackColor {\fIcolor\fP}"
This option sets the default background color for all widgets.

.IP "HilightColor {\fIcolor\fP}"
This option sets the default hilight color for all widgets.

.IP "ShadowColor {\fIcolor\fP}"
This option sets the default shadow color for all widgets.

.IP "Colorset {\fIn\fP}"
This option sets the default colorset for all widgets.

.IP "Font {\fIfont\fP}"
This option sets the default font color for all widgets.

.SH INITIALISATION
This part contains instructions which will be executed at the startup.
For example:
.EX
Init
 Begin
  Do "Exec cat tada.voc > /dev/dsp"
  WarpPointer 1
  Set $ToDo=Restart
 End
.EE
These instructions are used to play a sound, move the pointer
to widget 1 and to initialize $ToDo to "Restart" at every startup.

.SH PERIODIC TASKS
This part of the script contains some instructions whom are executed every
second.  For example:
.EX
Periodic Task
 Begin
  If (RemainderOfDiv (GetTime) 10)==0 Then
   Do {Exec xcalc}
 End
.EE
This example shows how to launch xcalc every 10 seconds.

.SH MAIN OF A SCRIPT
The second part of the script contains the description for every widget
which will be used in the program.  A description of widget is composed of
two parts. The first part describes initial properties and the second part
contains instructions which will be executed when the widget receives
messages. All widgets can send and receive messages. All message are identify
by a number. The message "UserAction" is sent to a widget when user has
altered this one. The syntax is as following:
.EX
Widget		id	# A number between 1 and 99 inclusive
Property
 Type		string
 Size width	height
 Position 	x y
 Title		{ string }
 Value		int
 MaxValue 	int
 MinValue 	int
 Font		string
 ForeColor 	{ color }
 BackColor 	{ color }
 HilightColor	{ color }
 ShadowColor	{ color }
 Colorset	int
 Flags		Hidden and/or NoReliefString
.EE
The option 'Flags` is used to specify if the widget is hidden or not and
if strings are drawn with relief or not. The position of every widget must be
specified.

.EX
Main
 Case Message of
  SingleClic:
  Begin
   # list of instructions which will be
   # executed when widget receives
   # message "SingleClic". This message is
   # generated by the user.
  End
  1:
  Begin
   # list of instructions which will be
   # executed when widget receives
   # message 1
  End
 End
.EE

.SH LIST OF WIDGETS
There is fifteen types of widgets.

.IP "\fBCheckBox\fP: Display check box with a string."

\fBTitle\fP: title of the check box.

\fBValue\fP: if Value is equal to 1, the box is checked else it is not.

The \fBSize\fP property is ignored.

.IP "\fBHDipstick\fP: Display a horizontal dipstick."
This widget can be used to display disk usage.

\fBValue\fP: specify the current value of the dipstick.

\fBMinValue\fP: specify the minimum value of the dipstick.

\fBMaxValue\fP: specify the maximum value of the dipstick.

A minimum size of 30x11 is imposed.

.IP "\fBHScrollBar\fP: Display an horizontal scrollbar."

\fBValue\fP: position of the thumb.

\fBMaxValue\fP: upper limit of Value.

\fBMinValue\fP: lower limit of Value.

The height property is ignored and a minimum width is imposed.  The width
should be at least the range plus 37 if all values are to be selectable e.g.
a min of 0 and max of 10 has a range of 11 and therefore should have a
minimum width of 48.

.IP "\fBItemDraw\fP: Display an icon and/or a string."

\fBTitle\fP: string to display.

\fBIcon\fP: icon to display.

The size is made large enough to contain the title and/or the icon.

.IP "\fBList\fP: Display a list."
List lets user to choose between various options.

\fBValue\fP: specify which option is selected.

\fBMinValue\fP: First visible option.

\fBTitle\fP: title contains options displayed in the list. The syntax is the
following: {Option 1|Option 2|...|Option N}. All menus are displayed at the top
of window.

A minimum height of three items is imposed and the width is made to be at
least 108.

.IP "\fBMenu\fP: Display a menu whom lets user to choose a option."
Items of type Menu are layed out from left to right along the top
of the window. The size and position properties are ignored.

\fBValue\fP: specify which option is selected.

\fBTitle\fP: title contains options displayed in the menu. The syntax is the
following:
{Option 1|Option 2|...|Option N}.

.IP "\fBMiniScroll\fP: Display a very small vertical scrollbar."

\fBValue\fP: position of the thumb.

\fBMaxValue\fP: upper limit of Value.

\fBMinValue\fP: lower limit of Value.

The size is set to 19x34.

.IP "\fBPopupMenu\fP: Display a pop up menu."

\fBValue\fP: specify what option is selected.

\fBTitle\fP: the title has the following syntax:
{Option 1|Option 2|...|Option N}."Option 1|Option 2|...|Option N" is the
pop up menu which is displayed when pressing mouse button.

The size property is ignored.

.IP "\fBPushButton\fP: Display push button with an icon and/or a string."

\fBTitle\fP: this string has the following syntax {Title of the button|Option
1|Option 2|Option3|...|Option N}. "Option 1|Option 2|...|Option N" is the
pop up menu which is displayed when pressing the right button.

\fBIcon\fP: icon to display.

The button is made large enough to fit the icon and or label.

.IP "\fBRadioButton\fP: Display radio button with a string."

\fBTitle\fP: title of the radio button.

\fBValue\fP: if Value is equal to 1, the box is checked else it is not.

The size property is ignored

.IP "\fBRectangle\fP: Display a rectangle."
 This type of widget can be used to decorate window.

.IP "\fBSwallowExec\fP"
This type of widget causes FvwmScript to spawn an process, and capture the
first window whose name or resource is equal to Title, and display it in
the script window.

\fBTitle\fP: specify the window name which be captured and displayed in the
script window.

\fBSwallowExec\fP: specify the command line to execute to spawn the process.
Modules can also be swallowed.

\fBValue\fP: specify the looking of the border. Possible value: -1, 0, 1.

The size is made to be at least 30x30

.IP "\fBTextField\fP: Display a text input field."
The text input field can be used to edit a single-line string.

\fBTitle\fP: content of text field.

\fBValue\fP: position of the insert point.

\fBMinValue\fP: position of the end of the selection.

\fBMaxValue\fP: first visible character of the title

The height property is ignored, the width is made to be at least 40 pixels
wider than the initial contents.

.IP "\fBVDipstick\fP: Display a vertical dipstick."

\fBValue\fP: specify the current value of the dipstick.

\fBMinValue\fP: specify the minimum value of the dipstick.

\fBMaxValue\fP: specify the maximum value of the dipstick.

The size is made to be at least 11x30.

.IP "\fBVScrollBar\fP: Display a vertical scrollbar."

\fBValue\fP: position of the thumb.

\fBMaxValue\fP: upper limit of Value.

\fBMinValue\fP: lower limit of Value.

The width property is ignored and a minimum height is imposed.  The height
should be at least the range plus 37 if all values are to be selectable e.g.
a min of 0 and max of 10 has a range of 11 and therefore should have a
minimum height of 48.

.SH INSTRUCTIONS

Here is the description of all instructions.

.IP "HideWidget \fIid\fP : hide the widget numbered \fIid\fP."

.IP "ShowWidget \fIid\fP: show the widget numbered \fIid\fP."

.IP "ChangeValue \fIid1 id2\fP"
Set the value of the widget numbered \fIid1\fP to \fIid2\fP.

.IP "ChangeMaxValue \fIid1 id2\fP"
Set the maximum value of the widget numbered \fIid1\fP to \fIid2\fP.

.IP "ChangeMinValue \fIid1 id2\fP"
Set the minimum value of the widget numbered \fIid1\fP to \fIid2\fP.

.IP "ChangeTitle \fIid1 id2\fP"
Set the title of the widget numbered \fIid1\fP to \fIid2\fP.

.IP "ChangeIcon \fIid1 id2\fP"
Set the icon of the widget numbered \fIid1\fP to \fIid2\fP.

.IP "ChangeForeColor \fIid1\fP {\fIcolor\fP}"
Set the foreground color of the widget numbered \fIid1\fP to {\fIcolor\fP}.

.IP "ChangeBackColor \fIid1\fP {\fIcolor\fP}"
Set the background color of the widget numbered \fIid1\fP to {\fIcolor\fP}.

.IP "ChangeColorSet \fIid1\fP \fIid2\fP"
Set the colorset of the widget numbered \fIid1\fP to \fIid2\fP. Specifying
widget 0 sets the main window colorset.

.IP "ChangePosition \fIid1 x y\fP"
Move the widget numbered \fIid1\fP to position (\fIx\fP,\fIy\fP).

.IP "ChangeSize \fIid1 width height\fP"
Set the size of the widget numbered \fIid1\fP to (\fIwidth\fP,\fIheight\fP).

.IP "ChangeFont \fIid1 newfont\fP"
Set the font of the widget numbered \fIid1\fP to \fInewfont\fP.

.IP "WarpPointer \fIid\fP"
Warp the mouse pointer into the widget numbered \fIid\fP.

.IP "WriteToFile \fIfilename\fP {\fIstr1\fP} {\fIstr2\fP} etc"
Write to the file \fIfilename\fP the string which is the concatenation of all
arguments \fIstr1\fP, \fIstr2\fP, etc.

.IP "Do {\fIstr1\fP} {\fIstr2\fP} etc"
Execute the command which is the concatenation of all arguments \fIstr1\fP,
\fIstr2\fP, etc.

.IP "Set $\fIvar\fP={\fIstr\fP1} {\fIstr2\fP} etc"
Concatenate all arguments to a string and set the variable $\fIvar\fP to this
string.

.IP "Quit: quit the program."

.IP "SendSignal \fIid1 id2\fP"
Send a message numbered \fIid2\fP to widget \fIid1\fP.

.IP "SendToScript \fIid_script\fP {\fIstr1\fP1} {\fIstr2\fP} etc"
Send a message to the script identified by id_script. The message is the
concatenation of str1, str2...

.SH ARGUMENTS
Most of commands use arguments. There is two kinds of argument: numbers and
strings.
A numerical argument is a value which is between -32000 and +32000. A string is
always surrounded with brace. Variables always begin with the character "$" and
can contains both number and string.

.SH FUNCTIONS
All functions are used as argument. Functions can return both string and
number.  The syntax is:
.EX
(function argument1 argument2 etc)
.EE
Here is the complete list of arguments:

.IP "(GetTitle \fIid\fP)"
Return the title of the widget numbered \fIid\fP.

.IP "(GetValue \fIid\fP)"
Return the current value of the widget numbered \fIid\fP.

.IP "(GetMinValue \fIid\fP)"
Return the current Min value of the widget numbered \fIid\fP.

.IP "(GetMaxValue \fIid\fP)"
Return the current Max value of the widget numbered \fIid\fP.

.IP "(GetFore \fIid\fP)"
Return the current RGB foreground value of the widget numbered \fIid\fP in the
hex format RRGGBB.

.IP "(GetBack \fIid\fP)"
Return the current RGB background value of the widget numbered \fIid\fP in the
hex format RRGGBB.

.IP "(GetHilight \fIid\fP)"
Return the current RGB hilight value of the widget numbered \fIid\fP in the
hex format RRGGBB.

.IP "(GetShadow \fIid\fP)"
Return the current RGB shadow value of the widget numbered \fIid\fP in the
hex format RRGGBB.

.IP "(GetOutput {\fIstr\fP} \fIint1 int2\fP)"
Executes the command \fIstr\fP, gets the standard output and returns the word
which is in the line \fIint1\fP and in the position \fIint2\fP. If \fIint2\fP
is equal to -1, GetOutput returns the complete line.

.IP "(NumToHex \fIint\fP)"
Return the hexadecimal value of \fIint\fP.

.IP "(HexToNum {\fIstr\fP})"
Return the decimal value of \fIstr\fP, \fIstr\fP must be an hexadecimal value.

.IP "(Add \fIint1 int2\fP)"
Return the result of (\fIint1\fP+\fIint2\fP).

.IP "(Mult \fIint1 int2\fP)"
Return the result of (\fIint1\fP*\fIint2\fP).

.IP "(Div \fIint1 int2\fP)"
Return the result of (\fIint1\fP/\fIint2\fP).

.IP "(StrCopy {\fIstr\fP} \fIint1 int2\fP)"
Return the string whom is between position int1 and int2. For example,
(StrCopy {Hello} 1 2) returns {He}

.IP "(LaunchScript {\fIstr\fP})"
This function launch the script named str and return an identification number.
This number is necessary to use these functions SendToScript and
ReceiveFromScript. The string str contains the script name and some arguments.

.IP "(GetScriptArgument {\fIint\fP})"
This function return the argument script used in the function LaunchScript.
If int is equal to zero, GetScriptArgument return the name of the script.

.IP "(GetScriptFather)"
This function return the identification number of the script father.

.IP "(ReceivFromScript {\fIint\fP})"
This function return the message sended by the script numbered int.

.IP "(RemainderOfDiv {\fIint1 int2\fP}): t"
This function return the remainder of the division (\fIint1\fP/\fIint2\fP).

.IP "(GetTime)"
This function return the time in second.

.SH CONDITIONAL LOOPS
There is three kind of conditional loops. The instruction "If-Then-Else"
has the following syntax:
.EX
If $ToDo=={Open xcalc} Then
 Do {Exec xcalc &} 	 		# List of instructions
Else
Begin
 Do {Exec killall xcalc &} 	# List of instructions
 Do {Exec echo xcalc killed > /dev/console}
End
.EE
The second part "Else-Begin-End" is optional. If the loop contains only one
instruction, Begin and End can be omitted. The instruction "While-Do" as the
following syntax:
.EX
While $i<5 Do
Begin
 Set $i=(Add i 1)	 		# List of instructions
End
.EE
Two strings can be compared with "==" and two numbers can be compared with "<",
"<=", "==", ">=", ">". The loop "For-Do-Begin-End" has the following syntax:
.EX
For $i=1 To 20 Do
Begin
 Do {Exec xcalc &}			# List of instructions
End
.EE

.SH EXAMPLES
You will find examples of scripts in the fvwm configuration directory.

FvwmScript-BellSetup, FvwmScript-KeyboardSetup, FvwmScript-PointerSetup and
FvwmScript-ScreenSetup are a set of scripts that modify X settings.
These scripts save preferences into a file named ~/.xinit-fvwmrc (If you want
to use another file name, give it as the first argument of the script).
If you want to load these preferences at every startup, you have to include
the line  ".xinit-fvwmrc" in your .xinitrc (or .xsession) file before
starting fvwm.

FvwmScript-BaseConfig modifies fvwm
focus and paging mouse policy, window placement, opacity and
other features of the move and resize commands, snap attraction and
shading animation.
This script saves preferences into a file named .FvwmBaseConfig in the
user's data directory (i.e., $HOME/.fvwm or $FVWM_USERDIR if set).
If you want to load these preferences at every startup you must add
the line "Read .FvwmBaseConfig" in your fvwm configuration file.
If you want to use another file name, give it as the first
argument of the script.
When you click on Ok or Apply an fvwm function that you may define
named BaseConfigOkFunc or BaseConfigApplyFunc is called.
This allows for reloading specific application styles
that the script has destroyed
(e.g., AddToFunc  BaseConfigOkFunc I Read MyAppStyle).

FvwmScript-Buttons is a buttons panel which can replace FvwmButtons (this
script supports popup menus and requires xload, xclock, FvwmPager, TkDesk).
FvwmScript-Colorset allows you to edit your colorset (see FvwmTheme).
FvwmScript-Date allows you to set date and time.
FvwmScript-FileBrowser is a file browser used by the other scripts.
FvwmScript-Find is an elementary front-end to find.
FvwmScript-Quit allows to quit fvwm, restart fvwm or some other window
manager, or shut down and reboot the computer.
FvwmScript-ScreenDump is a screen dumper. FvwmScript-WidgetDemo is a pure
example script.

.SH BUGS
FvwmScript crashes if widgets are accessed that have not been defined.

.SH AUTHOR
       Frederic Cordier (cordie97@cui.unige.ch or f-cord96@univ-lyon1.fr).

.SH CONTRIBUTOR
       Eddy J. Gurney (eddy@gizmo.aa.ans.net).

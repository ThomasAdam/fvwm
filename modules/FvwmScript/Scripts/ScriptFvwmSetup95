WindowTitle {Setup 95}
WindowSize 610 360		# Taille
Font		-adobe-helvetica-bold-r-*-*-12-*

Init
 Begin

   HideWidget 2
   HideWidget 1
   HideWidget 80
   HideWidget 81
   HideWidget 82
   HideWidget 71
   HideWidget 72
   HideWidget 73
   HideWidget 74
   HideWidget 5

   HideWidget 17
   HideWidget 18
   HideWidget 35
   HideWidget 36
   HideWidget 37
   HideWidget 38
   HideWidget 39
   HideWidget 40
   HideWidget 41
   HideWidget 42
   HideWidget 43
   HideWidget 44
   HideWidget 45
   HideWidget 46

   HideWidget 50
   HideWidget 51
   HideWidget 52
   HideWidget 53
   HideWidget 54
   HideWidget 55
   HideWidget 57
   HideWidget 58
   HideWidget 59
   HideWidget 60
   HideWidget 61
   HideWidget 62
   HideWidget 63
   
   Set $FHOME=(GetOutput  {echo "$FVWM_USERHOME"} 1 1)
   Set $OUTPUT=$FHOME {/.fvwm2rc}
   ChangeTitle 11 $OUTPUT
   ChangeTitle 74 $OUTPUT
   
   Set $CONFDIR = {/usr/local/etc/fvwm}
   Set $INPUT = $CONFDIR {/system.fvwm2rc-sample-95}
   Set $Perl = {/usr/bin/perl}

   If $Perl == {} Then
   Begin
    If $FHOME<>{} Then
    Begin
      HideWidget 4
      HideWidget 21
      HideWidget 22
      HideWidget 24
      HideWidget 25
      HideWidget 26
      HideWidget 27
      HideWidget 29
      HideWidget 30
      HideWidget 31
      HideWidget 32
      HideWidget 33
    End
   End
   Else
   Begin
     HideWidget 90
     HideWidget 91
     HideWidget 92

     Set $SELEC = {0}  
     # for perl the { and } !
     Set $B = (GetOutput {echo -e "\173"} 1 -1)
     Set $E = (GetOutput {echo -e "\175"} 1 -1)

     # Set the variables
     Set $IP=1
     Set $ImagePath={/usr/include/X11/pixmaps/}
     Set $SoundPath={/usr/share/sounds/}
     Set $SoundPlayer = {rplay}

     Set $Fvwm = 0
     Set $Laptop = 0
     Set $KdeSysMenu = 0
     Set $KdeUserMenu = 0
     Set $KdeMenu = 0
     Set $GnomeSysMenu = 0
     Set $GnomeUserMenu = 0
     Set $GnomeRHMenu = 0
     Set $GnomeMenuGtk = 0
     Set $GnomeMenuFvwm = 1
     Set $GnomeSession = 0
     Set $PanelStaysPut = 0
     Set $KfmIcons = 0
   
     # Check for KDE
     Set $KdeY=(GetOutput {echo "$KDEDIR"} 1 1)
     If $KdeY == {} Then
       Set $KdeY = 0
     Else
       Set $KdeY = 1

     # Check for GNOME
     Set $CMD = {perl -e '$t=0;$dir="N";@PD = split(":",$ENV} $B {PATH} $E {); foreach $d (@PD) } $B { if (-x "$d/panel") } $B { $t=1; $dir=$d; } $E { } $E {$dir =~ s/\/bin//; $dir =~ s/\/$//; $dir = "$dir/"; print "$t\n$dir\n";'}
     Set $GnomeY = (GetOutput $CMD 1 1)
     Set $GnomePath = (GetOutput $CMD 2 1)
     Set $CMD ={perl -e '$t=0; $a = `fvwm2 -version 2>&1`; $t=1 if ( $a =~ /Gnome/i); print "$t\n";'}
     Set $GnomeS = (GetOutput $CMD 1 -1)

     # Check for Stroke
     Set $CMD ={perl -e '$t=0; $a = `fvwm2 -version 2>&1`; $t=1 if ( $a =~ /stroke/i); print "$t\n";'}
     Set $Stroke = (GetOutput $CMD 1 -1)

     # Debug
     #  Set $KdeY = 1
     #  Set $GnomeY = 1
     #  Set $GnomeS = 0
     #Do {Echo } $KdeY{; } $GnomeY {; } $GnomePath {; } $GnomeS{; } $Stroke
     If $GnomeY == {0} Then
       Set $GnomeS = 0
   End
 End

PeriodicTasks
 Begin
  Set $IMSG=(ReceivFromScript $IBROWSER)
  If $IMSG <> {No message} Then
  Begin
   ChangeTitle 24 $IMSG
  End
  Set $SMSG=(ReceivFromScript $SBROWSER)
  If $SMSG <> {No message} Then
  Begin
   ChangeTitle 29 $SMSG
  End
 End

Widget 10
Property
 Position 10 10
 Type ItemDraw
 Title {This Script creates a configuration file for FVWM and copy it in:}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 11
Property
 Position 10 35
 Size 610 20
 Type ItemDraw
 Title {}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 12
Property
 Position 10 60
 Type ItemDraw
 Title {If such a file already exits it will be backup. Set your preferrences:}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 16
Property
 Size 590 210
 Position 10 95
 Type Rectangle
Main
 Case message of
  SingleClic :
  Begin
  End
End

#############################################################################
#ImagePath and Sound Path: First tableau

Widget 21
Property
 Position 20 105
 Type ItemDraw
 Title {You need a recent version of fvwm_icons installed. Set the installation directory of these icons}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 22
Property
 Position 20 135
 Type PopupMenu
 Title {/usr/include/X11/pixmaps/|/usr/share/icons|/usr/share/icons/fvwm|/usr/local/share/icons|/usr/local/share/icons/fvwm|$HOME/icons|$HOME/icons/fvwm|$HOME/fvwm-web/icons/}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 22) == 1 Then
    ChangeTitle 24 {/usr/include/X11/pixmaps/}
   If (GetValue 22) == 2 Then
    ChangeTitle 24 {/usr/share/icons}
   If (GetValue 22) == 3 Then
    ChangeTitle 24 {/usr/share/icons/fvwm}
   If (GetValue 22) == 4 Then
    ChangeTitle 24 {/usr/local/share/icons/}
   If (GetValue 22) == 5 Then
    ChangeTitle 24 {/usr/local/share/icons/fvwm}
   If (GetValue 22) == 6 Then
    ChangeTitle 24 {$HOME/icons}
   If (GetValue 22) == 7 Then
    ChangeTitle 24 {$HOME/icons/fvwm}
   If (GetValue 22) == 8 Then
    ChangeTitle 24 {$HOME/fvwm-web/icons/}
  End
End

Widget 24
Property
 Size 250 30
 Position 240 135
 Type TextField
 Title {/usr/include/X11/pixmaps/}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 25
Property
 Position 510 135
 Type PushButton
 Title {Browser...}
Main
 Case message of
  SingleClic :
  Begin
   Set $ARG={ScriptFvwmFileBrowser } (GetTitle 24) { I}
   Set $IBROWSER=(LaunchScript $ARG )
  End
End



Widget 26
Property
 Position 20 185
 Type ItemDraw
 Title {For sounds effect you need fvwm_sounds and an .au player. Set the fvwm_sounds directory:}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 27
Property
 Position 20 215
 Type PopupMenu
 Title {/usr/share/sounds/|/usr/share/sounds/fvwm/|/usr/local/share/sounds/|/usr/local/share/sounds/fvwm/|$HOME/sounds|$HOME/sounds/fvwm/}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 27) == 1 Then
     ChangeTitle 29 {/usr/share/sounds/}
   If (GetValue 27) == 2 Then
     ChangeTitle 29 {/usr/share/sounds/fvwm/}
   If (GetValue 27) == 3 Then
     ChangeTitle 29 {/usr/local/share/sounds/}
   If (GetValue 27) == 4 Then
     ChangeTitle 29 {/usr/local/share/sounds/fvwm/}
   If (GetValue 27) == 5 Then
     ChangeTitle 29 {$HOME/sounds/}
   If (GetValue 27) == 6 Then
     ChangeTitle 29 {$HOME/sounds/fvwm/}
  End
End

Widget 29
Property
 Size 250 30
 Position 240 215
 Type TextField
 Title {/usr/share/sounds/}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 30
Property
 Position 510 215
 Type PushButton
 Title {Browser...}
Main
 Case message of
  SingleClic :
  Begin
   Set $ARG={ScriptFvwmFileBrowser } (GetTitle 29) { S}
   Set $SBROWSER=(LaunchScript $ARG )
  End
End

Widget 31
Property
 Position 20 265
 Type ItemDraw
 Title {And choose a Player:}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 32
Property
 Position 175 260
 Type PopupMenu
 Title {rplay|esdplay|auplay}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 32) == 1 Then
     ChangeTitle 33 {rplay}
   If (GetValue 32) == 2 Then
     ChangeTitle 33 {esdplay}
   If (GetValue 32) == 3 Then
     ChangeTitle 33 {auplay}
  End
End

Widget 33
Property
 Size 250 30
 Position 345 260
 Type TextField
 Title {rplay}
Main
 Case message of
  SingleClic :
  Begin
  End
End

#############################################################################
# look and Preferred apps: Second Tableau

Widget 17
Property
 Position 20 110
 Type ItemDraw
 Title {Look Preferrence:}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 18
Property
 Position 155 105
 Type PopupMenu
 Title {FVWM 95|FVWM}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 18) == 1 Then
     Set $Fvwm={0}
   If (GetValue 18) == 2 Then
     Set $Fvwm={1}
  End
End


Widget 35
Property
 Position 20 155
 Type ItemDraw
 Title {Preferred Editor:}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 36
Property
 Position 155 150
 Type PopupMenu
 Title {emacs|xemacs|gvim|nedite|xedit|gxedit|kwrite|dtpad}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 36) == 1 Then
    ChangeTitle 37 {emacs}
   If (GetValue 36) == 2 Then
    ChangeTitle 37 {xemacs}
   If (GetValue 36) == 3 Then
    ChangeTitle 37 {gvim}
   If (GetValue 36) == 4 Then
    ChangeTitle 37 {nedit}
   If (GetValue 36) == 5 Then
    ChangeTitle 37 {xedit}
   If (GetValue 36) == 6 Then
    ChangeTitle 37 {gxedit}
   If (GetValue 36) == 7 Then
    ChangeTitle 37 {kwrite}
   If (GetValue 36) == 8 Then
    ChangeTitle 37 {dtpad}
  End
End

Widget 37
Property
 Size 180 30
 Position 365 150
 Type TextField
 Title {emacs}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 38
Property
 Position 20 190
 Type ItemDraw
 Title {Preferred FileMgr:}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 39
Property
 Position 155 185
 Type PopupMenu
 Title {xfm|Midnight-Commender|File Runner|dfm|kfm|gmc|dtfile|kexplorer}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 39) == 1 Then
    ChangeTitle 40 {xfm}
   If (GetValue 39) == 2 Then
     ChangeTitle 40 {xterm -g 80x35 -e mc}
   If (GetValue 39) == 3 Then
     ChangeTitle 40 {fr}
   If (GetValue 39) == 4 Then
     ChangeTitle 40 {dfm}
   If (GetValue 39) == 5 Then
     ChangeTitle 40 {kfmclient openURL ~/}
   If (GetValue 39) == 6 Then
     ChangeTitle 40 {gmc}
   If (GetValue 39) == 7 Then
     ChangeTitle 40 {dtfile}
   If (GetValue 39) == 8 Then
     ChangeTitle 40 {kexplorer}
  End
End

Widget 40
Property
 Size 180 30
 Position 365 185
 Type TextField
 Title {xfm}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 41
Property
 Position 20 225
 Type ItemDraw
 Title {Preferred Terminal:}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 42
Property
 Position 155 220
 Type PopupMenu
 Title {xterm|nxterm|rxvt|Eterm|xiterm|aterm|kvt|konsole|Gterminal|dtterm}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 42) == 1 Then
    ChangeTitle 43 {xterm}
   If (GetValue 42) == 2 Then
    ChangeTitle 43 {nxterm}
   If (GetValue 42) == 3 Then
    ChangeTitle 43 {rxvt}
   If (GetValue 42) == 4 Then
    ChangeTitle 43 {Eterm}
   If (GetValue 42) == 5 Then
    ChangeTitle 43 {xiterm}
   If (GetValue 42) == 6 Then
    ChangeTitle 43 {aterm}
   If (GetValue 42) == 7 Then
    ChangeTitle 43 {kvt}
   If (GetValue 42) == 8 Then
    ChangeTitle 43 {konsole}
   If (GetValue 42) == 9 Then
    ChangeTitle 43 {gnome-terminal}
   If (GetValue 42) == 10 Then
    ChangeTitle 43 {dtterm}
  End
End

Widget 43
Property
 Size 180 30
 Position 365 220
 Type TextField
 Title {xterm}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 44
Property
 Position 20 275
 Type ItemDraw
 Title {Do you have a laptop (and xapm)?}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 45
Property
 Title {No}
 Position 250 275
 Type RadioButton
 Value 1
Main
 Case message of
  SingleClic :
  Begin
   ChangeValue 45 1
   ChangeValue 46 0
   Set $Laptop={0}
  End
End

Widget 46
Property
 Title {Yes}
 Position 300 275
 Type RadioButton
 Value 0
Main
 Case message of
  SingleClic :
  Begin
   ChangeValue 45 0
   ChangeValue 46 1
   Set $Laptop={1}
  End
End

#############################################
# Desktop options:

Widget 50
Property
 Position 20 105
 Type ItemDraw
 Title {Desktops Options (GNOME & KDE)}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 51
Property
 Position 20 140
 Type CheckBox
 Title {Add GNOME system menu}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 51) == 1 Then
    Set $GnomeSysMenu={1}
   Else
    Set $GnomeSysMenu={0}
  End
End


Widget 52
Property
 Position 275 140
 Type CheckBox
 Title {Add GNOME user menu}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 52) == 1 Then
    Set $GnomeUserMenu={1}
   Else
    Set $GnomeUserMenu={0}
  End
End


Widget 53
Property
 Position 20 175
 Type CheckBox
 Title {Add GNOME "RedHat" menu}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 53) == 1 Then
    Set $GnomeRHMenu={1}
   Else
    Set $GnomeRHMenu={0}
  End
End


Widget 54
Property
 Position 275 175
 Type CheckBox
 Title {Use Gtk Menu instead of Fvwm one}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 54) == 1 Then
   Begin
    Set $GnomeMenuGtk={1}
    Set $GnomeMenuFvwm={0}
   End
   Else
   Begin
    Set $GnomeMenuGtk={0}
    Set $GnomeMenuFvwm={1}
   End
  End
End

##### No gnome panel on the machine 
Widget 55
Property
 Position 20 170
 Type ItemDraw
 Title {It does not seem that GNOME is installed on your machine}
Main
 Case message of
  SingleClic :
  Begin
  End
End



Widget 57
Property
 Position 20 210
 Type CheckBox
 Title {Build a config for gnome-session}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 57) == 1 Then
    Set $GnomeSession={1}
   Else
    Set $GnomeSession={0}
  End
End

Widget 58
Property
 Position 275 210
 Type CheckBox
 Title {Try a "stays put" panel (gnome-session only)}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 58) == 1 Then
    Set $PanelStaysPut={1}
   Else
    Set $PanelStaysPut={0}
  End
End

##### No FVWM support for gnome
Widget 59
Property
 Position 20 210
 Type ItemDraw
 Title {Your version of FVWM is not compiled with support for GNOME}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 60
Property
 Position 20 260
 Type CheckBox
 Title {Add KDE system menu}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 60) == 1 Then
    Set $KdeSysMenu={1}
   Else
    Set $KdeSysMenu={0}
  End
End


Widget 61
Property
 Position 210 260
 Type CheckBox
 Title {Add KDE user menu}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 61) == 1 Then
    Set $KdeUserMenu={1}
   Else
    Set $KdeUserMenu={0}
  End
End

Widget 62
Property
 Position 400 260
 Type CheckBox
 Title {Add support for KFM icons}
Main
 Case message of
  SingleClic :
  Begin
   If (GetValue 62) == 1 Then
    Set $KfmIcons={1}
   Else
    Set $KfmIcons={0}
  End
End

##### No KDE on the machine 
Widget 63
Property
 Position 20 260
 Type ItemDraw
 Title {It does not seem that KDE is installed on your machine}
Main
 Case message of
  SingleClic :
  Begin
  End
End


#############################################################################
# Ok, apply, cancel, next and previous

Widget 4
Property
 Size 30 30
 Position 350 320
 Type PushButton
 Title {Next >>}
Main
 Case message of
  SingleClic :
  Begin
    If $SELEC <> {3} Then
      Set $SELEC = (Add $SELEC 1)
    If $SELEC == {1} Then
    Begin
      HideWidget 21
      HideWidget 22
      HideWidget 24
      HideWidget 25
      HideWidget 26
      HideWidget 27
      HideWidget 29
      HideWidget 30
      HideWidget 31
      HideWidget 32
      HideWidget 33
     
      ShowWidget 17
      ShowWidget 18
      ShowWidget 35
      ShowWidget 36
      ShowWidget 37
      ShowWidget 38
      ShowWidget 39
      ShowWidget 40
      ShowWidget 41
      ShowWidget 42
      ShowWidget 43
      ShowWidget 44
      ShowWidget 45
      ShowWidget 46

      ShowWidget 5
    End
    If $SELEC == {2} Then
    Begin
      ShowWidget 50

      If $GnomeY == {1} Then
      Begin
        ShowWidget 51
        ShowWidget 52
        ShowWidget 53
        ShowWidget 54
      End
      Else
        ShowWidget 55

      If $GnomeS == {1} Then
      Begin
        ShowWidget 57
        ShowWidget 58
      End
      Else
      Begin
        If $GnomeY == {1} Then
           ShowWidget 59
      End

      If $KdeY == {1} Then
      Begin
        ShowWidget 60
        ShowWidget 61
        ShowWidget 62
      End
      Else
        ShowWidget 63

      HideWidget 17
      HideWidget 18
      HideWidget 35
      HideWidget 36
      HideWidget 37
      HideWidget 38
      HideWidget 39
      HideWidget 40
      HideWidget 41
      HideWidget 42
      HideWidget 43
      HideWidget 44
      HideWidget 45
      HideWidget 46
    End
    If $SELEC == {3} Then
    Begin
      HideWidget 50

      If $GnomeY == {1} Then
      Begin
        HideWidget 51
        HideWidget 52
        HideWidget 53
        HideWidget 54
      End
      Else
        HideWidget 55

      If $GnomeS == {1} Then
      Begin
        HideWidget 57
        HideWidget 58
      End
      Else
      Begin
        If $GnomeY == {1} Then
           HideWidget 59
      End

      If $KdeY == {1} Then
      Begin
        HideWidget 60
        HideWidget 61
        HideWidget 62
      End
      Else
        HideWidget 63

      HideWidget 4
 
      ShowWidget 1
      ShowWidget 71
      ShowWidget 72
      ShowWidget 73
      ShowWidget 74
    End
  End
End

Widget 5
Property
 Size 30 30
 Position 200 320
 Type PushButton
 Title {<< Previous}
Main
 Case message of
  SingleClic :
  Begin
    If $SELEC <> {0} Then
      Set $SELEC = (Add $SELEC -1)
    If $SELEC == {0} Then
    Begin
      ShowWidget 21
      ShowWidget 22
      ShowWidget 24
      ShowWidget 25
      ShowWidget 26
      ShowWidget 27
      ShowWidget 29
      ShowWidget 30
      ShowWidget 31
      ShowWidget 32
      ShowWidget 33

      HideWidget 17
      HideWidget 18     
      HideWidget 35
      HideWidget 36
      HideWidget 37
      HideWidget 38
      HideWidget 39
      HideWidget 40
      HideWidget 41
      HideWidget 42
      HideWidget 43
      HideWidget 44
      HideWidget 45
      HideWidget 46

      HideWidget 5
    End
    If $SELEC == {1} Then
    Begin
      HideWidget 50

      If $GnomeY == {1} Then
      Begin
        HideWidget 51
        HideWidget 52
        HideWidget 53
        HideWidget 54
      End
      Else
        HideWidget 55

      If $GnomeS == {1} Then
      Begin
        HideWidget 57
        HideWidget 58
      End
      Else
      Begin
        If $GnomeY == {1} Then
           HideWidget 59
      End

      If $KdeY == {1} Then
      Begin
        HideWidget 60
        HideWidget 61
        HideWidget 62
      End
      Else
        HideWidget 63

      ShowWidget 17
      ShowWidget 18
      ShowWidget 35
      ShowWidget 36
      ShowWidget 37
      ShowWidget 38
      ShowWidget 39
      ShowWidget 40
      ShowWidget 41
      ShowWidget 42
      ShowWidget 43
      ShowWidget 44
      ShowWidget 45
      ShowWidget 46
    End
    If $SELEC == {2} Then
    Begin
      HideWidget 1
      HideWidget 71
      HideWidget 72
      HideWidget 73
      HideWidget 74

      ShowWidget 4
      ShowWidget 50

      If $GnomeY == {1} Then
      Begin
        ShowWidget 51
        ShowWidget 52
        ShowWidget 53
        ShowWidget 54
      End
      Else
        ShowWidget 55

      If $GnomeS == {1} Then
      Begin
        ShowWidget 57
        ShowWidget 58
      End
      Else
      Begin
        If $GnomeY == {1} Then
           ShowWidget 59
      End

      If $KdeY == {1} Then
      Begin
        ShowWidget 60
        ShowWidget 61
        ShowWidget 62
      End
      Else
        ShowWidget 63

    End
  End
End

############# Cancel
Widget 3
Property
 Size 30 30
 Position 520 320
 Type PushButton
 Title {Cancel}
Main
 Case message of
  SingleClic :
  Begin
   Quit
  End
End

############ Restart to apply
 
Widget 80
Property
 Position 20 110
 Type ItemDraw
 Title {Your new FVWM configuration file has been build and installed. So that FVWM do exactly what}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 81
Property
 Position 20 130
 Type ItemDraw
 Title {you want edit this file, read the FVWM man pages and the FAQ. Also, you will find a special}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 82
Property
 Position 20 150
 Type ItemDraw
 Title {MINI-FAQ on this file via the root menu (Documents->Mini-FAQ).}
Main
 Case message of
  SingleClic :
  Begin
  End
End


Widget 2
Property
 Size 70 30
 Position 235 190
 Type PushButton
 Title {Restart To Apply}
Main
 Case message of
  SingleClic :
  Begin
   Do Restart
  End
End


############ Build the config
 
Widget 71
Property
 Size 570 20
 Position 20 120
 Type ItemDraw
 Title {Are you ready to build the configuration?}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 72
Property
 Position 20 250
 Font fixed
 Type ItemDraw
 Title {Note: If this window disappear after you click on this button, then something bad happened.}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 73
Property
 Position 20 265
 Font fixed
 Type ItemDraw
 Title {Then either re-run this script or copy (and then edit) by hands fvwm2rc.system-sample-95 in}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 74
Property
 Size 400 20
 Position 20 280
 Font fixed
 Type ItemDraw
 Title {}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 1
Property
 Size 70 30
 Position 265 160
 Type PushButton
 Title {Yes, I am !}
Main
 Case message of
  SingleClic :
  Begin

   # Create the fvwm user home dir if need
   If $FHOME <> {} Then
      Do {Exec /bin/mkdir -p } $FHOME
 
   # Backup
   Set $DATE = {date +%Y%m%d-%H%M%S}
   Set $Backup = (GetOutput  $DATE 1 -1)
   Set $Backup = $OUTPUT {-} $Backup
   Do {Exec if [ -f } $OUTPUT { ]; then  /bin/mv } $OUTPUT { } $Backup{; fi;}
   
   Set $ImagePath = (GetTitle 24)
   Set $SoundPath = (GetTitle 29)
   Set $SoundPlayer = (GetTitle 33)
   Set $Editor = (GetTitle 37)
   Set $FileMgr = (GetTitle 40)
   Set $Term = (GetTitle 43)

   # To prevent perl error:
   If $Editor == {} Then
      Set $Editor = {emacs}
   If $FileMgr == {} Then
      Set $FileMgr = {xfm}
   If $Term == {} Then
      Set $Term = {xterm}
   If $SoundPath == {} Then
      Set $SoundPath = {/usr/share/sounds/}
   If $SoundPlayer == {} Then
      Set $SoundPlayer = {rplay}
   If $ImagePath == {} Then
      Set $IP={0}


   If $Editor == {xemacs} Then
      Set $Reditor = {emacs}
   If $Editor == {gvim} Then
      Set $Reditor = {VIM}
   If $Reditor == {} Then
      Set $Reditor = $Editor


   If $ImagePath == {/usr/include/X11/pixmaps/} Then
     Set $IP=0
   If $ImagePath == {/usr/include/X11/pixmaps} Then
     Set $IP=0

   Set $GnomeSysMenuGtk = (Mult $GnomeMenuGtk $GnomeSysMenu)
   Set $GnomeUserMenuGtk = (Mult $GnomeMenuGtk $GnomeUserMenu)
   Set $GnomeRHMenuGtk = (Mult $GnomeMenuGtk $GnomeRHMenu)
   Set $GnomeSysMenuFvwm = (Mult $GnomeMenuFvwm $GnomeSysMenu)
   Set $GnomeUserMenuFvwm = (Mult $GnomeMenuFvwm $GnomeUserMenu)
   Set $GnomeRHMenuFvwm = (Mult $GnomeMenuFvwm $GnomeRHMenu)

   If $KdeSysMenu == {1} Then
      Set $KdeMenu = {1}
   If $KdeUserMenu == {1} Then
      Set $KdeMenu = {1}

   Set $PERLCMD = {$S=1;$U=0;$C=0;$P=0;$G=0;open(IN,"}$INPUT{");open(OUT,">}$OUTPUT{");while(<IN>)}$B{if ($S)}$B{$_="";$S=0}$E{chomp;s/^\#// if $U;$_="\#$_" if $C;$U-- if $U;$C-- if $C;if(/^\#WIN/&&}$Fvwm{)}$B{split;$C=@_[1];}$E{if((/^\#FVWM/&&}$Fvwm{)||(/^\#K_M/&&}$KdeMenu{)||(/^\#K_SM/&&}$KdeSysMenu{)||(/^\#K_UM/&&}$KdeUserMenu{)||(/^\#KFM_ICONS/&&}$KfmIcons{)||(/^\#G_M_G/&&}$GnomeMenuGtk{)||(/^\#G_SM_G/&&}$GnomeSysMenuGtk{)||(/^\#G_UM_G/&&}$GnomeUserMenuGtk{)||(/^\#G_RHM_G/&&}$GnomeRHMenuGtk{)||(/^\#G_SM_F/&&}$GnomeSysMenuFvwm{)||(/^\#G_UM_F/&&}$GnomeUserMenuFvwm{)||(/^\#G_RHM_F/&&}$GnomeRHMenuFvwm{)||(/^\#G_SESSION/&&}$GnomeSession{)||(/^\#G_ST/&&}$GnomeY{)||(/^\#STROKE/&&}$Stroke{)||(/^\#LAPTOP/&&}$Laptop{)||(/^\#PANEL_PUT/&&}$PanelStaysPut{))}$B{split;$U=@_[1];}$E{if ($P)}$B{s# emacs# }$Editor{#;s#\*macs#}$Reditor{#;s#xfm#}$FileMgr{#;s#xterm#}$Term{#;}$E{$P-- if $P;if (/^\#PREF/)}$B{split;$P=@_[1];}$E{s#rplay#}$SoundPlayer{# if /Event/;s#/usr/share/sounds/#\}$SoundPath{# if /Event/;s#/usr#\}$GnomePath{# if($G);$G-- if $G;$G=1 if(/^\#G/);if(/pathtofvwm_icons/&&}$IP{)}$B{s/^\#//;s#pathtofvwm_icons#\}$ImagePath{#;}$E{print OUT "$_\n";}$E


  Do {Echo perl -e '} $PERLCMD {'}
  Do {Exec } $Perl { -e '} $PERLCMD {'}

  # cp the .start-* file if there are no
  Do {Exec [ -f } $FHOME {/.start-Background ] || echo "AddToFunc StartFunction I Exec exec xsetroot -solid \#7F4B7F">} $FHOME {/.start-Background}
  Do {Exec [ -f } $FHOME {/.start-DeskerPanelButtons ] || echo "AddToFunc StartFunction I FvwmButtons DeskerPanelButtons">} $FHOME {/.start-DeskerPanelButtons}
  If $GnomeSession == {0} Then
  Begin
    If $Fvwm == {1} Then
      Do {Exec [ -f } $FHOME {/.start-apps-man ] || echo "AddToFunc StartFunction I IconManGlobal">} $FHOME {/.start-apps-man}
    Else
      Do {Exec [ -f } $FHOME {/.start-apps-man ] || echo "AddToFunc StartFunction I TaskBarDesk">} $FHOME {/.start-apps-man}
    Do {Exec [ -f } $FHOME {/.start-FvwmButtons ] || echo "AddToFunc StartFunction I FvwmButtons BarButtons">} $FHOME {/.start-FvwmButtons}
    Do {Exec [ -f } $FHOME {/.start-FvwmAnimate ] || echo "AddToFunc StartFunction I FvwmAnimate">} $FHOME {/.start-FvwmAnimate}
  End
  Else
  Begin
    Do {Exec [ -f } $FHOME {/.start-apps-man ] || echo "AddToFunc StartFunction I Style * NoIcon # No applications Manager">} $FHOME {/.start-apps-man}
    Do {Exec [ -f } $FHOME {/.start-FvwmButtons ] || echo "# No Buttons Bar">} $FHOME {/.start-FvwmButtons}
    Do {Exec [ -f } $FHOME {/.start-FvwmAnimate ] || echo "# Do not start FvwmAnimate">} $FHOME {/.start-FvwmAnimate}
  End

    Do {Exec [ -f } $FHOME {/.start-MiniButtons ] || echo "# Do not start FvwmButtons MiniButtons">} $FHOME {/.start-MiniButtons}
    Do {Exec [ -f } $FHOME {/.start-WinMakerAppButtons ] || echo "# Do not start FvwmButtons WinMakerAppButtons">} $FHOME {/.start-WinMakerAppButtons}
    Do {Exec [ -f } $FHOME {/.start-FvwmAuto ] || echo "# Do not start FvwmAuto">} $FHOME {/.start-FvwmAuto}
    Do {Exec [ -f } $FHOME {/.start-FvwmBanner ] || echo "# Do not start FvwmBanner">} $FHOME {/.start-FvwmBanner}
   Do {Exec [ -f } $FHOME {/.start-FvwmEvent ] || echo "# Do not start FvwmEvent">} $FHOME {/.start-FvwmEvent}

  # Try to wait perl finish its stuff
  Do {Piperead 'sleep 4'}
  ShowWidget 2
  ShowWidget 80
  ShowWidget 81
  ShowWidget 82

  HideWidget 71
  HideWidget 72
  HideWidget 73
  HideWidget 74
  HideWidget 1
  HideWidget 5
  End
End

##########################################################################
# If Perl is not installed !!

Widget 90
Property
 Position 20 110
 Type ItemDraw
 Title {It seems that perl is not installed in your machine (bad idea). So, this script will just copy}
Main
 Case message of
  SingleClic :
  Begin
  End
End

Widget 91
Property
 Position 20 130
 Type ItemDraw
 Title {fvwm2rc.system-sample-95 in your FVWM configuration directory.}
Main
 Case message of
  SingleClic :
  Begin
  End
End


Widget 92
Property
 Size 70 30
 Position 265 160
 Type PushButton
 Title {Copy !}
Main
 Case message of
  SingleClic :
  Begin

   # Create the fvwm user home dir if need
   If $FHOME <> {} Then
      Do {Exec /bin/mkdir -p } $FHOME
 
   # Backup
   Set $DATE = {date +%Y%m%d-%H%M%S}
   Set $Backup = (GetOutput  $DATE 1 -1)
   Set $Backup = $OUTPUT {-} $Backup
   Do {Exec if [ -f } $OUTPUT { ]; then  /bin/mv } $OUTPUT { } $Backup{; fi; sed -e s/^FvwmScript\.*//} $INPUT { > } $OUTPUT
     # cp the .start-* file if there are no
  Do {Exec [ -f } $FHOME {/.start-Background ] || echo "AddToFunc StartFunction I Exec exec xsetroot -solid \#7F4B7F">} $FHOME {/.start-Background}
  Do {Exec [ -f } $FHOME {/.start-DeskerPanelButtons ] || echo "AddToFunc StartFunction I FvwmButtons DeskerPanelButtons">} $FHOME {/.start-DeskerPanelButtons}
  If $GnomeSession == {0} Then
  Begin
    If $Fvwm == {1} Then
      Do {Exec [ -f } $FHOME {/.start-apps-man ] || echo "AddToFunc StartFunction I IconManGlobal">} $FHOME {/.start-apps-man}
    Else
      Do {Exec [ -f } $FHOME {/.start-apps-man ] || echo "AddToFunc StartFunction I TaskBarDesk">} $FHOME {/.start-apps-man}
    Do {Exec [ -f } $FHOME {/.start-FvwmButtons ] || echo "AddToFunc StartFunction I FvwmButtons BarButtons">} $FHOME {/.start-FvwmButtons}
    Do {Exec [ -f } $FHOME {/.start-FvwmAnimate ] || echo "AddToFunc StartFunction I FvwmAnimate">} $FHOME {/.start-FvwmAnimate}
  End
  Else
  Begin
    Do {Exec [ -f } $FHOME {/.start-apps-man ] || echo "AddToFunc StartFunction I Style * NoIcon # No applications Manager">} $FHOME {/.start-apps-man}
    Do {Exec [ -f } $FHOME {/.start-FvwmButtons ] || echo "# No Buttons Bar">} $FHOME {/.start-FvwmButtons}
    Do {Exec [ -f } $FHOME {/.start-FvwmAnimate ] || echo "# Do not start FvwmAnimate">} $FHOME {/.start-FvwmAnimate}
  End

    Do {Exec [ -f } $FHOME {/.start-MiniButtons ] || echo "# Do not start FvwmButtons MiniButtons">} $FHOME {/.start-MiniButtons}
    Do {Exec [ -f } $FHOME {/.start-WinMakerAppButtons ] || echo "# Do not start FvwmButtons WinMakerAppButtons">} $FHOME {/.start-WinMakerAppButtons}
    Do {Exec [ -f } $FHOME {/.start-FvwmAuto ] || echo "# Do not start FvwmAuto">} $FHOME {/.start-FvwmAuto}
    Do {Exec [ -f } $FHOME {/.start-FvwmBanner ] || echo "# Do not start FvwmBanner">} $FHOME {/.start-FvwmBanner}
   Do {Exec [ -f } $FHOME {/.start-FvwmEvent ] || echo "# Do not start FvwmEvent">} $FHOME {/.start-FvwmEvent}

  # Try to wait the above finish its stuff
  Do {Piperead 'sleep 4'}

  ShowWidget 2
  ShowWidget 80
  ShowWidget 81
  ShowWidget 82

  HideWidget 90
  HideWidget 91
  HideWidget 92
  HideWidget 74
  HideWidget 1
  HideWidget 5
  End
End

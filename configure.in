dnl Process this file with autoconf to produce a configure script.
dnl
AC_PREREQ(2.13)
AC_INIT(fvwm/fvwm.c)
AM_INIT_AUTOMAKE(fvwm, 2.3.7)
AM_CONFIG_HEADER(config.h)

FVWM_MODULEDIR='${libexecdir}/${PACKAGE}/${VERSION}'
FVWM_CONFIGDIR='${sysconfdir}/${PACKAGE}'

AC_SUBST(FVWM_MODULEDIR)
AC_SUBST(FVWM_CONFIGDIR)


dnl Various configure-time options
dnl
dnl NOTE: the disabled options will be removed in the near future for better
dnl maintainability of the code.
dnl smr_SWITCH(activedown-button, ActiveDown button state, on, ACTIVEDOWN_BTNS)
dnl smr_SWITCH(borderstyle, BorderStyle command, on, BORDERSTYLE)
smr_SWITCH(debug-msgs, debugging messages, off, FVWM_DEBUG_MSGS)
dnl smr_SWITCH(extended-titlestyle, styled title-bars, on, EXTENDED_TITLESTYLE)
dnl smr_SWITCH(gradient-buttons, gradient button style, on, GRADIENT_BUTTONS)
dnl smr_SWITCH(inactive-button, Inactive button state, on, INACTIVE_BTNS)
smr_SWITCH(kanji, multibyte character support, off, I18N_MB)
dnl smr_SWITCH(mini-icons, MiniIcon style option, on, MINI_ICONS)
smr_SWITCH(move-bug-workaround, workaround for flickering windows during move, off, DISABLE_CONFIGURE_NOTIFY_DURING_MOVE)
smr_SWITCH(modality, modal dialogs for applications, on, MODALITY_IS_EVIL)
dnl smr_SWITCH(multistyle, stacked button styles, on, MULTISTYLE)
dnl smr_SWITCH(pixmap-buttons, pixmap button style, on, PIXMAP_BUTTONS)
smr_SWITCH(shape, shape extensions, on, SHAPE)
dnl smr_SWITCH(usedecor, UseDecor style option, on, USEDECOR)
dnl smr_SWITCH(vector-buttons, vector button style, on, VECTOR_BUTTONS)
smr_SWITCH(gnome, GNOME Window Manager Hints, off, GNOME)

dnl FIXME: default value should be derived from computed path to X
dnl includes.  Actually, this should probably not appear in configure
dnl at all: it is settable at runtime, and only confuses the issue to
dnl have it settable here too.
dnl
AC_MSG_CHECKING(imagepath)
val="/usr/include/X11/bitmaps:/usr/include/X11/pixmaps"
AC_ARG_WITH(imagepath,
[  --with-imagepath=PATH    colon-delimited search path for images],
[ case "$withval" in
  no)
    AC_MSG_ERROR(Can not disable image path.)
    ;;
  yes)
    ;;
  *)
    val="$withval"
    ;;
  esac ])
AC_DEFINE_UNQUOTED(FVWM_IMAGEPATH, "$val")
AC_MSG_RESULT($val)

dnl GNOME WM Hints
AM_CONDITIONAL(GNOME, test "x$enable_gnome" = "xyes")

dnl Minimal checks for programs: enough to enable checking for
dnl optional libraries.
AC_PROG_CC
AC_PROG_CPP

dnl Help finding POSIX functions on some systems
AC_ISC_POSIX
AC_MINIX

dnl Need to know where X is, for finding some libraries (e.g. xpm)
AC_PATH_XTRA

dnl Checking for optional libraries
dnl Default is to use them if found; can be disable using --without
dnl These are put up front so that if they are requested, but
dnl configure fails to find them, we fail early.

dnl Using 'unset' is said to be unportable, but setting to null is
dnl not enough to avoid using the cached value!

unset ac_cv_header_X11_xpm_h
unset ac_cv_lib_Xpm_XpmReadFileToXpmImage
smr_CHECK_LIB(xpm, Xpm, for coloured or shaped icons,
    XpmReadFileToXpmImage, X11/xpm.h,
    [$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS], $X_CFLAGS)

xpm_problem=": Xpm library or header not found!"

if test "$xpm_LIBS"; then
  dnl Check for proper version of Xpm -- from XEmacs 21.x configure.in
  xpm_problem=""
  AC_MSG_CHECKING(for Xpm 3.4f or better)
  my_CPPFLAGS="$CPPFLAGS"
  my_LIBS="$LIBS"
  CPPFLAGS="$CPPFLAGS $xpm_CFLAGS $X_CFLAGS"
  LIBS="$LIBS $xpm_LIBS $X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS"
  AC_TRY_RUN([#include <X11/xpm.h>
   int main(int c, char **v) {
   return c == 1 ? 0 :
     XpmIncludeVersion != XpmLibraryVersion() ? 1 :
     XpmIncludeVersion < 30406 ? 2 : 0 ;}],
    [./conftest dummy_arg; xpm_status=$?;
     if test "$xpm_status" = "0"; then
       with_xpm=yes;
     else
       with_xpm=no;
       if test "$xpm_status" = "1"; then
	 xpm_problem=": Xpm library version and header file version don't match!"
       elif test "$xpm_status" = "2"; then
	 xpm_problem=": Xpm library version is too old!"
       else
	 xpm_problem=": Internal xpm detection logic error!"
       fi
     fi],
   [with_xpm=no])
  AC_MSG_RESULT($with_xpm)
  CPPFLAGS="$my_CPPFLAGS"
  LIBS="$my_LIBS"

  if test "$with_xpm" = yes; then
    AC_DEFINE(XPM)
    FVWMBANNER=FvwmBanner AC_SUBST(FVWMBANNER)
    XPMROOT=xpmroot AC_SUBST(XPMROOT)
    FVWMSCRIPT=FvwmScript AC_SUBST(FVWMSCRIPT)
  else
    xpm_LIBS=
    xpm_CFLAGS=
  fi
fi
AC_SUBST(xpm_LIBS)
AC_SUBST(xpm_CFLAGS)

unset ac_cv_header_rplay_h
unset ac_cv_lib_rplay_rplay_create
dnl Add in X_EXTRA_LIBS here to get things like connect().
smr_CHECK_LIB(rplay, , adds audio capability, rplay_create, rplay.h,
	      $X_EXTRA_LIBS)

test "$rplay_LIBS" && AC_DEFINE(HAVE_RPLAY)
AC_SUBST(rplay_LIBS)
AC_SUBST(rplay_CFLAGS)

unset ac_cv_header_stroke_h
unset ac_cv_lib_stroke_stroke_init
dnl Add in X_LIBS for MOUSE_DROPPINGS?
smr_CHECK_LIB(stroke, , adds mouse strokes recognition, stroke_init, stroke.h,
          $X_LIBS)
test "$stroke_LIBS" && AC_DEFINE(HAVE_STROKE)
AC_SUBST(stroke_LIBS)
AC_SUBST(stroke_CFLAGS)

dnl FIXME: should compute availability of termcap
dnl Forget cached values, so user can re-run configure
unset ac_cv_header_readline_readline_h
unset ac_cv_lib_readline_readline
AC_MSG_CHECKING([with termcap])
smr_CHECK_LIB(readline, , , readline, readline/history.h, -ltermcap)
if test "$readline_LIBS"; then
  readline_LIBS="$readline_LIBS -ltermcap"
  AC_DEFINE(HAVE_READLINE)
else
  # We couldn't use readline with termcap; try with ncurses?
  dnl FIXME: should compute availability of ncurses
  dnl also: doesn't this seem a hacky way to do this??
  dnl unset cached values from last check...
  unset ac_cv_header_readline_readline_h
  unset ac_cv_lib_readline_readline
  AC_MSG_CHECKING([with ncurses])
  smr_CHECK_LIB(readline, , , readline, readline/readline.h, -lncurses)
  if test "$readline_LIBS"; then
    readline_LIBS="$readline_LIBS -lncurses"
    AC_DEFINE(HAVE_READLINE)
  fi
fi
AC_SUBST(readline_LIBS)
AC_SUBST(readline_CFLAGS)

dnl FreeBSD has libxpg4, check this and use if found.
if test "$enable_kanji" = yes; then
  AC_CANONICAL_HOST
  case $host_os in
    freebsd*)
      AC_CHECK_LIB(xpg4, setlocale, [LIBS="$LIBS -lxpg4"]);;
    *) ;;
  esac
fi

dnl Check if Xsetlocale() is available or not.
AC_CHECK_LIB(X11, _Xsetlocale, AC_DEFINE(X_LOCALE),, $X_LIBS -lX11)

dnl FreeBSD has libxpg4, check this and use if found.
if test "$enable_kanji" = yes; then
  AC_CANONICAL_HOST
  case $host_os in
    freebsd*)
      AC_CHECK_LIB(xpg4, setlocale, [LIBS="$LIBS -lxpg4"]);;
    *) ;;
  esac
fi

dnl Check if Xsetlocale() is available or not.
AC_CHECK_LIB(X11, _Xsetlocale, AC_DEFINE(X_LOCALE),, $X_LIBS -lX11)


dnl Check for REQUIRED headers and functions before going any
dnl further.

dnl The module interface uses variadic functions for message passing.
AC_CHECK_HEADERS(stdarg.h)
AC_CHECK_FUNCS(vfprintf)
if test $ac_cv_header_stdarg_h = no -o \
        $ac_cv_func_vfprintf = no; then
     AC_MSG_ERROR(stdarg.h and vfprintf required.)
fi

dnl For reaping children, fvwm needs either waitpid() or wait3()
dnl Some extra modules may need wait4() too
AC_CHECK_FUNCS(waitpid)
if test $ac_cv_func_waitpid = no; then
    AC_CHECK_FUNCS(wait3 wait4)
    if test $ac_cv_func_wait3 = no; then
        AC_MSG_ERROR(Either waitpid or wait3 function is required)
    fi
fi

dnl Make the C++ compiler optional, for it is only used in
dnl modules, not for the main code.
dnl
dnl Actually, we don't use it at _all_ anymore, since the only module
dnl that used it has been removed.  It causes problems so we'll comment
dnl it out for now.  Hopefully by the time we need it again autoconf
dnl will handle it better :-/

dnl AC_ARG_WITH(cxx,
dnl [  --without-cxx           disable probing for C++ compiler])
dnl
dnl if test "$with_cxx" != no; then
dnl     if test "$with_cxx" -a "$with_cxx" != yes; then
dnl         CCC=$with_cxx
dnl # disable the cached value before probing
dnl         unset ac_cv_prog_CXX
dnl         AC_CHECK_PROGS(CXX, $CCC)
dnl         test "$CXX" ||
dnl             AC_MSG_ERROR(C++ compiler given by --with-cxx not found)
dnl     else
dnl         AC_CHECK_PROGS(CXX, $CCC c++ g++ gcc CC cxx cc++)
dnl     fi
dnl     if test "$CXX"; then
dnl         AC_MSG_RESULT(Using $CXX to compile C++ programs)
dnl         with_cxx=yes
dnl         AC_PROG_CXX
dnl     fi
dnl fi

dnl Look harder for a C preprocessor for FvwmCpp
AC_PATH_PROG(FVWM_CPP, cpp, no, $PATH:/lib:/usr/lib:/usr/ccs/lib)
if test "$FVWM_CPP" = no; then
  FVWM_CPP=
  AC_MSG_WARN([cannot locate a C preprocessor: run FvwmCpp with -cppprog])
fi
dnl FIXME: make sure the cpp we found actually works...

dnl Finish checking for programs.
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AM_PROG_LEX
AC_PROG_YACC
AC_PATH_PROG(PERL, perl)


dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(stdlib.h fcntl.h limits.h malloc.h string.h memory.h unistd.h)
AC_CHECK_HEADERS(getopt.h sys/select.h sys/systeminfo.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
dnl AC_HEADER_TIME
dnl AC_STRUCT_TM

dnl Checks for library functions.
AC_TYPE_SIGNAL
AC_FUNC_ALLOCA
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(gettimeofday mkfifo putenv setvbuf socket waitpid)
AC_CHECK_FUNCS(strdup strstr strtol memmove memcpy strchr sysconf uname div)
AC_CHECK_FUNCS(sigaction siginterrupt getpwuid)

pds_CHECK_TYPE(sig_atomic_t, int, [#include <signal.h>])

if test $ac_cv_func_setvbuf = yes; then
  AC_FUNC_SETVBUF_REVERSED
fi

AC_FUNC_SELECT
if test $ac_cv_func_select != yes; then
  AC_MSG_ERROR(select required.)
fi

dnl Check for standard functions that we have replacements for.
AC_REPLACE_FUNCS(gethostname strcasecmp strncasecmp strerror usleep atexit)
AC_SUBST(LIBOBJS)

dnl If we do not have atexit(), then check for on_exit()
if test $ac_cv_func_atexit = no; then
  AC_CHECK_FUNCS(on_exit)
fi

dnl Check the availability of SM
dnl We don't have to add any extra libraries, since
dnl -lSM -lICE are in X_PRE_LIBS when they exist.
AC_CHECK_LIB(SM, SmcOpenConnection, AC_DEFINE(SESSION), ,
             [$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS])

dnl Check the availability of Gtk
AM_PATH_GTK(1.1.0,[FVWMGTK=FvwmGtk AC_SUBST(FVWMGTK)],)
if test "x$no_gtk" = x ; then
  with_gtk=yes
else
  with_gtk=no
fi

dnl Check the availability of gdk-imlib
AM_PATH_GDK_IMLIB(1.8.0, AC_DEFINE(IMLIB),)

AC_OUTPUT(Makefile libs/Makefile fvwm/Makefile modules/Makefile
utils/Makefile utils/fvwmbug.sh
utils/fvwm-menu-xlock utils/fvwm-menu-directory utils/fvwm-menu-desktop
docs/Makefile icons/Makefile sample.fvwmrc/Makefile tests/Makefile
dnl
modules/FvwmAnimate/Makefile
modules/FvwmAuto/Makefile
modules/FvwmBacker/Makefile
modules/FvwmBanner/Makefile
modules/FvwmButtons/Makefile
modules/FvwmCommand/Makefile
modules/FvwmCommand/scripts/Makefile
modules/FvwmConsole/Makefile
modules/FvwmCpp/Makefile
modules/FvwmDebug/Makefile
modules/FvwmEvent/Makefile
modules/FvwmForm/Makefile
modules/FvwmIconBox/Makefile
modules/FvwmIconMan/Makefile
modules/FvwmIdent/Makefile
modules/FvwmM4/Makefile
modules/FvwmPager/Makefile
modules/FvwmRearrange/Makefile
modules/FvwmSave/Makefile
modules/FvwmSaveDesk/Makefile
modules/FvwmScript/Makefile
modules/FvwmScript/Scripts/Makefile
modules/FvwmScript/Scripts/some_nice_icons/Makefile
modules/FvwmScript/Widgets/Makefile
modules/FvwmScroll/Makefile
modules/FvwmTaskBar/Makefile
modules/FvwmTheme/Makefile
modules/FvwmWharf/Makefile
modules/FvwmWinList/Makefile
modules/FvwmGtk/Makefile
)

echo "
Configuration:

  FVWM Version:             $VERSION

  Have ReadLine support?    $with_readline
  Have RPlay support?	    $with_rplay
  Have Stroke support?      $with_stroke
  Have XPM support? 	    $with_xpm$xpm_problem
  Have GTK support?         $with_gtk
"

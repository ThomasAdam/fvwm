dnl Process this file with autoconf to produce a configure script.
dnl
AC_PREREQ(2.13)
AC_INIT(fvwm/fvwm.c)
AM_INIT_AUTOMAKE(fvwm, 2.4.17)
AM_CONFIG_HEADER(config.h)

FVWM_MODULESUBDIR=/${PACKAGE}/${VERSION}
FVWM_DATASUBDIR=/${PACKAGE}

AC_ARG_ENABLE(package-subdirs,
  [  --disable-package-subdirs  do not create subdirs for modules and data],
  [if test $enableval = no; then FVWM_MODULESUBDIR=""; FVWM_DATASUBDIR=""; fi],
  [])

FVWM_MODULEDIR='${libexecdir}'$FVWM_MODULESUBDIR
FVWM_DATADIR='${datadir}'$FVWM_DATASUBDIR
FVWM_CONFDIR='${sysconfdir}'dnl used _only_ to search for system.fvwm2rc

AC_SUBST(FVWM_MODULEDIR)
AC_SUBST(FVWM_DATADIR)
AC_SUBST(FVWM_CONFDIR)


dnl Various configure-time options
dnl

AC_ARG_ENABLE(dmalloc,
  [  --enable-dmalloc        enable support for the dmalloc debugging library],
  [ac_cv_dmalloc="$enableval"],
  [ac_cv_dmalloc="no"])

AC_ARG_ENABLE(efence,
  [  --enable-efence         enable support for the efence debugging library],
  [ac_cv_efence="$enableval"],
  [ac_cv_efence="no"])

smr_SWITCH(command-log, command logging, off, FVWM_COMMAND_LOG)
smr_SWITCH(debug-msgs, debugging messages, off, FVWM_DEBUG_MSGS)
smr_SWITCH(multibyte, multibyte character support (experimental), off, I18N_MB)
if test "$enable_multibyte" != yes; then
  smr_SWITCH(compound-text, compound text conversion support, on, COMPOUND_TEXT)
fi
dnl dummy: smr_SWITCH(sm, dummy for test script, on, SESSION)

AC_ARG_ENABLE(kanji,
  [  --enable-kanji          obsolete, please use --enable-multibyte instead],
  [AC_MSG_ERROR(--enable-kanji is obsolete; use --enable-multibyte instead.)],
  [])

dnl FIXME: default value should be derived from computed path to X
dnl includes.  Actually, this should probably not appear in configure
dnl at all: it is settable at runtime, and only confuses the issue to
dnl have it settable here too.
dnl
AC_MSG_CHECKING(imagepath)
val="/usr/include/X11/bitmaps:/usr/include/X11/pixmaps"
AC_ARG_WITH(imagepath,
[  --with-imagepath=PATH   colon-delimited search path for images],
[ case "$withval" in
  no)
    AC_MSG_ERROR(Can not disable image path.)
    ;;
  yes)
    ;;
  *)
    val="$withval"
    ;;
  esac ])
AC_DEFINE_UNQUOTED(FVWM_IMAGEPATH, "$val")
FVWM_IMAGEPATH="$val"
AC_SUBST(FVWM_IMAGEPATH)
AC_MSG_RESULT($val)

dnl Minimal checks for programs: enough to enable checking for
dnl optional libraries.
AC_PROG_CC
AC_PROG_CPP

dnl Help finding POSIX functions on some systems
AC_ISC_POSIX
AC_MINIX

dnl Need to know where X is, for finding some libraries (e.g. xpm)
no_x=""
AC_PATH_XTRA
if test "$no_x" = "yes"; then
  echo
  echo "X11 libraries or header files could not be found.  Please make"
  echo "sure the X11 development package is installed on your system."
  echo "If it is definitely installed, try setting the include and library"
  echo "paths with the --x-include and --x-libraries options of configure."
  echo "Fvwm can not be compiled without the X11 development environment"
  echo
  echo "Aborting."
  echo
  exit 1
fi

dnl 'unset' is not portable, but setting to null is not enough to avoid using
dnl the cached value!  For ancient shells "rm config.cache" is a solution.
UNSET=true
if unset UNSET 2>/dev/null; then UNSET=unset; fi


dnl ********* GNOME window manager hints
dnl Note, no gnome headers or libs are needed for FVWM to be GNOME compliant.
smr_SWITCH(gnome-hints, GNOME window manager hints, on, GNOME)
dnl AM_CONDITIONAL(GNOME, test "x$enable_gnome_hints" != "xno")


dnl ********* session management
dnl Check the availability of SM; we don't have to add any extra libraries,
dnl since -lSM -lICE are in X_PRE_LIBS when they exist.
dnl [old check] AC_CHECK_LIB(SM, SmcOpenConnection, AC_DEFINE(SESSION), ,
dnl [old check]            [$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS])

problem_sm=""

AC_ARG_ENABLE(sm,
  [  --disable-sm            disable session management support],
  [ if test "$enableval" = yes; then
    with_sm="yes, check"
  else
    with_sm="no"
    problem_sm=": Explicitly disabled"
  fi ],
  [ with_sm="not specified, check" ]
)

if test "$with_sm" != "no"; then
  dnl Uncomment the following and comment out AC_CHECK_LIB to get --with-sm-*
  dnl $UNSET ac_cv_lib_SM_SmcOpenConnection
  dnl $UNSET ac_cv_header_X11_SM_SMlib_h
  dnl smr_CHECK_LIB(sm, SM, adds session management support, SmcOpenConnection,
  dnl   X11/SM/SMlib.h,
  dnl   [$X_LIBS $X_PRE_LIBS $X_EXTRA_LIBS], $X_CFLAGS)
  dnl test "$sm_LIBS" && AC_DEFINE(SESSION)

  $UNSET ac_cv_lib_SM_SmcOpenConnection
  AC_CHECK_LIB(SM, SmcOpenConnection, with_sm=yes; AC_DEFINE(SESSION),
    with_sm=no; problem_sm=": Failed to detect libSM",
    [$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS])
fi
dnl AC_SUBST(sm_LIBS)
dnl AC_SUBST(sm_CFLAGS)


dnl Checking for optional libraries
dnl Default is to use them if found; can be disable using --without
dnl These are put up front so that if they are requested, but
dnl configure fails to find them, we fail early.


dnl ********* shape extension
dnl smr_SWITCH(shape, shape extensions, on, SHAPE)
AC_ARG_ENABLE(shape,
  [  --disable-shape         disable shaped window support],
  [ if test "$enableval" = yes; then
    with_shape="yes, check"
  else
    with_shape="no"
    problem_shape=": Explicitly disabled"
  fi ],
  [ with_shape="not specified, check" ]
)

if test "$with_shape" != "no"; then
  $UNSET ac_cv_lib_Xext_XShapeQueryExtension
  AC_CHECK_LIB(Xext, XShapeQueryExtension,
               with_shape=yes; AC_DEFINE(SHAPE),
               with_shape=no;
               problem_shape=": Failed to detect Shape extension",
               [$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS])
fi


dnl ********* xinerama
problem_xinerama=""

AC_ARG_ENABLE(xinerama,
  [  --disable-xinerama      disable Xinerama multi screen support],
  [ if test "$enableval" = yes; then
    with_xinerama="yes, check"
  else
    with_xinerama="no"
    problem_xinerama=": Explicitly disabled"
  fi ],
  [ with_xinerama="not specified, check" ]
)

if test "$with_xinerama" != "no"; then
  $UNSET ac_cv_lib_Xinerama_XineramaIsActive
  AC_CHECK_LIB(Xinerama, XineramaIsActive,
    with_xinerama=yes; Xinerama_LIBS=-lXinerama; AC_DEFINE(HAVE_XINERAMA),
    with_xinerama=no; Xinerama_LIBS=
    problem_xinerama=": Failed to detect libXinerama",
    [$X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS])
fi
AC_SUBST(Xinerama_LIBS)
AC_SUBST(Xinerama_CFLAGS)


dnl ********* xinerama-emulation
smr_SWITCH(xinerama-emulation, Xinerama emulation on one screen (useful for developers only),
           off, USE_XINERAMA_EMULATION)
if test "$enable_xinerama_emulation" = yes; then
  with_xinerama_emulation=yes
else
  with_xinerama_emulation=no
fi


dnl ********* xpm
problem_xpm=": Xpm library or header not found!"

$UNSET ac_cv_header_X11_xpm_h
$UNSET ac_cv_lib_Xpm_XpmReadFileToXpmImage
smr_CHECK_LIB(xpm, Xpm, for coloured or shaped icons,
    XpmReadFileToXpmImage, X11/xpm.h,
    [$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS], $X_CFLAGS)

# non empty value (true or false) means disable symlinks
XPMROOT_NEW_NAME_SYMLINKS=true
if test "$xpm_LIBS"; then
  dnl Check for proper version of Xpm -- from XEmacs 21.x configure.in
  problem_xpm=""
  AC_MSG_CHECKING(for Xpm 3.4g or better)
  my_CPPFLAGS="$CPPFLAGS"
  my_LIBS="$LIBS"
  CPPFLAGS="$CPPFLAGS $xpm_CFLAGS $X_CFLAGS"
  LIBS="$LIBS $xpm_LIBS $X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS"
  AC_TRY_RUN([#include <X11/xpm.h>
   int main(int c, char **v) {
   return c == 1 ? 0 :
     XpmIncludeVersion != XpmLibraryVersion() ? 1 :
     XpmIncludeVersion < 30407 ? 2 : 0 ;}],
    [./conftest dummy_arg; xpm_status=$?;
     if test "$xpm_status" = "0"; then
       with_xpm=yes;
     else
       with_xpm=no;
       if test "$xpm_status" = "1"; then
	 problem_xpm=": Xpm library and header versions don't match!"
       elif test "$xpm_status" = "2"; then
	 problem_xpm=": Xpm library version is too old!"
       else
	 problem_xpm=": Internal xpm detection logic error!"
       fi
     fi],
   [with_xpm=no])
  AC_MSG_RESULT($with_xpm)
  CPPFLAGS="$my_CPPFLAGS"
  LIBS="$my_LIBS"

  if test "$with_xpm" = yes; then
    AC_DEFINE(XPM)
    FVWMBANNER=FvwmBanner AC_SUBST(FVWMBANNER)
    XPMROOT=xpmroot AC_SUBST(XPMROOT)
    FVWMSCRIPT=FvwmScript AC_SUBST(FVWMSCRIPT)
    XPMROOT_NEW_NAME_SYMLINKS=
  else
    xpm_LIBS=
    xpm_CFLAGS=
  fi
fi
AC_SUBST(xpm_LIBS)
AC_SUBST(xpm_CFLAGS)
AC_SUBST(XPMROOT_NEW_NAME_SYMLINKS)


dnl ********* rplay
$UNSET ac_cv_header_rplay_h
$UNSET ac_cv_lib_rplay_rplay_create
dnl Add in X_EXTRA_LIBS here to get things like connect().
smr_CHECK_LIB(rplay, , adds audio capability, rplay_create, rplay.h,
	      $X_EXTRA_LIBS)
test "$rplay_LIBS" && AC_DEFINE(HAVE_RPLAY)
AC_SUBST(rplay_LIBS)
AC_SUBST(rplay_CFLAGS)


dnl ********* stroke
$UNSET ac_cv_header_stroke_h
$UNSET ac_cv_lib_stroke_stroke_init
dnl Add in X_LIBS for MOUSE_DROPPINGS?
dnl As of 23/Mar/2000 the only libstroke RPM has /usr/X11R6/include/stroke.h
smr_CHECK_LIB(stroke, , mouse strokes recognition,
	stroke_init, stroke.h,
	[$X_LIBS -lX11], $X_CFLAGS -I/usr/X11R6/include)
test "$stroke_LIBS" && AC_DEFINE(HAVE_STROKE)
AC_SUBST(stroke_LIBS)
AC_SUBST(stroke_CFLAGS)


dnl ********* readline
with_readline=no
problem_readline=": Both termcap and ncurses disabled"

smr_ARG_WITHLIB(termcap, , to accomplish readline)
if test "$with_termcap" != "no"; then
  dnl Forget cached values, so user can re-run configure
  $UNSET ac_cv_header_readline_history_h
  $UNSET ac_cv_lib_readline_readline
  AC_MSG_CHECKING([with termcap])
  smr_CHECK_LIB(readline, , line editing/history, readline, readline/history.h,
    $termcap_LIBS)
  if test "$readline_LIBS"; then
    with_readline=yes
    readline_LIBS="$readline_LIBS $termcap_LIBS"
    AC_DEFINE(HAVE_READLINE)
  fi
fi
smr_ARG_WITHLIB(ncurses, , to accomplish readline)
if test "$with_ncurses" != "no" -a ! "$readline_LIBS"; then
  # We couldn't use readline with termcap; try with ncurses?
  dnl Doesn't this seem a hacky way to do this??
  dnl unset cached values from last check...
  $UNSET ac_cv_header_readline_history_h
  $UNSET ac_cv_lib_readline_readline
  AC_MSG_CHECKING([with ncurses])
  dnl We can't call smr_CHECK_LIB twice here without having the usage twice...
  dnl old_LIBS=$LIBS
  dnl AC_CHECK_LIB(readline, readline, , , $ncurses_LIBS)
  dnl LIBS=$old_LIBS
  dnl if test "$ac_cv_lib_readline_readline" = yes; then
  dnl   AC_CHECK_HEADERS(readline/history.h)
  dnl   if test "$ac_cv_header_readline_history_h" = yes; then
  dnl     with_readline=yes
  dnl     readline_LIBS="$readline_LIBS $ncurses_LIBS"
  dnl     AC_DEFINE(HAVE_READLINE)
  dnl   fi
  dnl fi
  smr_CHECK_LIB(readline, , line editing/history, readline, readline/history.h,
    $ncurses_LIBS)
  if test "$readline_LIBS"; then
    with_readline=yes
    readline_LIBS="$readline_LIBS $ncurses_LIBS"
    AC_DEFINE(HAVE_READLINE)
  fi
fi
AC_SUBST(readline_LIBS)
AC_SUBST(readline_CFLAGS)


dnl ********* multibyte
with_multibyte=no
problem_multibyte=": Use --enable-multibyte to enable"

dnl FreeBSD has libxpg4, check this and use if found.
if test "$enable_multibyte" = yes; then
  with_multibyte=yes
  problem_multibyte=""
  AC_CANONICAL_HOST
  case $host_os in
    freebsd*)
      AC_CHECK_LIB(xpg4, setlocale, [LIBS="$LIBS -lxpg4"]);;
    *) ;;
  esac
fi

dnl Check if Xsetlocale() is available or not.
AC_CHECK_LIB(X11, _Xsetlocale, AC_DEFINE(X_LOCALE),, $X_LIBS -lX11)


dnl Check for REQUIRED headers and functions before going any
dnl further.

dnl The module interface uses variadic functions for message passing.
AC_CHECK_HEADERS(stdarg.h)
AC_CHECK_FUNCS(vfprintf)
if test $ac_cv_header_stdarg_h = no -o \
        $ac_cv_func_vfprintf = no; then
     AC_MSG_ERROR(stdarg.h and vfprintf required.)
fi

dnl For reaping children, fvwm needs either waitpid() or wait3()
dnl Some extra modules may need wait4() too
AC_CHECK_FUNCS(waitpid)
if test $ac_cv_func_waitpid = no; then
    AC_CHECK_FUNCS(wait3 wait4)
    if test $ac_cv_func_wait3 = no; then
        AC_MSG_ERROR(Either waitpid or wait3 function is required)
    fi
fi

dnl Make the C++ compiler optional, for it is only used in
dnl modules, not for the main code.
dnl
dnl Actually, we don't use it at _all_ anymore, since the only module
dnl that used it has been removed.  It causes problems so we'll comment
dnl it out for now.  Hopefully by the time we need it again autoconf
dnl will handle it better :-/

dnl AC_ARG_WITH(cxx,
dnl [  --without-cxx           disable probing for C++ compiler])
dnl
dnl if test "$with_cxx" != no; then
dnl     if test "$with_cxx" -a "$with_cxx" != yes; then
dnl         CCC=$with_cxx
dnl # disable the cached value before probing
dnl         $UNSET ac_cv_prog_CXX
dnl         AC_CHECK_PROGS(CXX, $CCC)
dnl         test "$CXX" ||
dnl             AC_MSG_ERROR(C++ compiler given by --with-cxx not found)
dnl     else
dnl         AC_CHECK_PROGS(CXX, $CCC c++ g++ gcc CC cxx cc++)
dnl     fi
dnl     if test "$CXX"; then
dnl         AC_MSG_RESULT(Using $CXX to compile C++ programs)
dnl         with_cxx=yes
dnl         AC_PROG_CXX
dnl     fi
dnl fi

dnl Look harder for a C preprocessor for FvwmCpp
AC_PATH_PROG(FVWM_CPP, cpp, no, $PATH:/lib:/usr/lib:/usr/ccs/lib)
if test "$FVWM_CPP" = no; then
  FVWM_CPP=
  AC_MSG_WARN([cannot locate a C preprocessor: run FvwmCpp with -cppprog])
fi
dnl FIXME: make sure the cpp we found actually works...

dnl Finish checking for programs.
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
dnl lex+yacc now only needed for FvwmScript developers when syntax is changed
dnl AM_PROG_LEX
dnl AC_PROG_YACC

if test x"$PERL" = x; then
  AC_PATH_PROG(PERL, perl)
fi
dnl We need at least perl 5.002 for FvwmConsoleC.pl and fvwm-menu-headlines.
if test ! -z "$PERL"; then
  AC_MSG_CHECKING(for perl 5.002 or better)
  if ("$PERL" -e "require 5.002;") 2>/dev/null; then
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
    AC_MSG_WARN($PERL not found or too old)
  fi
else
  AC_MSG_WARN(perl not found; you can't run some extra scripts)
  PERL=/usr/bin/perl
fi
AC_MSG_RESULT([assuming $PERL as perl location])
AC_SUBST(PERL)

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(stdlib.h fcntl.h limits.h malloc.h string.h memory.h unistd.h)
AC_CHECK_HEADERS(getopt.h sys/select.h sys/systeminfo.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
dnl AC_HEADER_TIME
dnl AC_STRUCT_TM

dnl Checks for library functions.
AC_TYPE_SIGNAL
AC_FUNC_ALLOCA
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(gettimeofday mkfifo putenv setvbuf socket waitpid)
AC_CHECK_FUNCS(strdup strstr strtol memmove memcpy strchr sysconf uname div)
AC_CHECK_FUNCS(sigaction siginterrupt getpwuid)

pds_CHECK_TYPE(sig_atomic_t, int, [#include <signal.h>])

if test $ac_cv_func_setvbuf = yes; then
  AC_FUNC_SETVBUF_REVERSED
fi

AC_FUNC_SELECT
if test $ac_cv_func_select != yes; then
  AC_MSG_ERROR(select required.)
fi

dnl Check for standard functions that we have replacements for.
AC_REPLACE_FUNCS(gethostname strcasecmp strncasecmp strdup strerror usleep atexit)
dnl AC_SUBST(LIBOBJS)

dnl If we do not have atexit(), then check for on_exit()
if test $ac_cv_func_atexit = no; then
  AC_CHECK_FUNCS(on_exit)
fi


dnl ********* GTK, IMLIB, GNOME
dnl Check the availability of gtk
AM_PATH_GTK(1.1.0,[FVWMGTK=FvwmGtk AC_SUBST(FVWMGTK)],)
if test "x$no_gtk" = x; then
  with_gtk=yes
  problem_gtk=""
else
  with_gtk=no
  problem_gtk=": Failed to detect GTK, see config.log"
fi

dnl Check the availability of gdk-imlib
AM_PATH_GDK_IMLIB(1.8.0, AC_DEFINE(GDK_IMLIB),)
if test "x$no_imlib" = x; then
  with_gdkimlib=yes
  problem_gdkimlib=""
else
  with_gdkimlib=no
  problem_gdkimlib=": Failed on gdk-imlib, see config.log"
fi

GNOME_INIT_HOOK

dnl Unfortunately we have 2 gnome supports: WM hints and gnome libs.
dnl The $with_gnomehints below refers to the first, not GNOME_INIT_HOOK.
if test "x$enable_gnome_hints" != "xno"; then
  with_gnomehints=yes
  problem_gnomehints=""
else
  with_gnomehints=no
  problem_gnomehints=": Explicitly disabled"
fi


dnl Define some compatibility macros needed for acconfig.h.
mg_DEFINE_IF_NOT([#include <X11/keysym.h>],
  [defined XK_Page_Up && defined XK_Page_Down],
  [COMPAT_OLD_KEYSYMDEF], [$X_CFLAGS])

if test "$with_stroke" = yes; then
  mg_DEFINE_IF_NOT([#include <stroke.h>],
    [defined STROKE_MAX_SEQUENCE],
    [COMPAT_OLD_LIBSTROKE], [$stroke_CFLAGS])
fi


dnl Allow building with dmalloc.  Do this last to avoid screwing up any
dnl other checks above.

case "$ac_cv_dmalloc" in
  yes) AC_CHECK_HEADERS(dmalloc.h)
       AC_CHECK_LIB(dmalloc, dmalloc_shutdown)
       CPPFLAGS="$CPPFLAGS -DDMALLOC_FUNC_CHECK" ;;
esac


dnl Allow building with efence.

case "$ac_cv_efence" in
  yes) AC_CHECK_LIB(efence, malloc) ;;
esac


# mainly for fvwm-config
AC_SUBST(with_gnomehints)
AC_SUBST(with_gtk)
AC_SUBST(with_gdkimlib)
AC_SUBST(with_gnomelibs)
AC_SUBST(with_multibyte)
AC_SUBST(with_readline)
AC_SUBST(with_rplay)
AC_SUBST(with_shape)
AC_SUBST(with_sm)
AC_SUBST(with_stroke)
AC_SUBST(with_xinerama)
AC_SUBST(with_xpm)

AC_OUTPUT(Makefile libs/Makefile fvwm/Makefile modules/Makefile
utils/Makefile utils/fvwm-config
utils/fvwm-menu-xlock utils/fvwm-menu-directory
utils/fvwm-menu-desktop utils/fvwm-menu-headlines
utils/fvwm24_convert utils/fvwmbug.sh
rpm/Makefile rpm/fvwm.spec docs/fvwm.lsm
docs/Makefile sample.fvwmrc/Makefile tests/Makefile
dnl
modules/FvwmAnimate/Makefile
modules/FvwmAuto/Makefile
modules/FvwmBacker/Makefile
modules/FvwmBanner/Makefile
modules/FvwmButtons/Makefile
modules/FvwmCommand/Makefile
modules/FvwmCommand/scripts/Makefile
modules/FvwmConsole/Makefile
modules/FvwmConsole/FvwmConsoleC.pl
modules/FvwmCpp/Makefile
modules/FvwmDebug/Makefile
modules/FvwmDragWell/Makefile
modules/FvwmEvent/Makefile
modules/FvwmForm/Makefile
modules/FvwmIconBox/Makefile
modules/FvwmIconMan/Makefile
modules/FvwmIdent/Makefile
modules/FvwmM4/Makefile
modules/FvwmPager/Makefile
modules/FvwmRearrange/Makefile
modules/FvwmSave/Makefile
modules/FvwmSaveDesk/Makefile
modules/FvwmScript/Makefile
modules/FvwmScript/Scripts/Makefile
modules/FvwmScript/Widgets/Makefile
modules/FvwmScroll/Makefile
modules/FvwmTaskBar/Makefile
modules/FvwmTheme/Makefile
modules/FvwmWharf/Makefile
modules/FvwmWinList/Makefile
modules/FvwmGtk/Makefile
)

# ---------------------------------------------------------------------------
cat >config.status-t <<EOF
#! /bin/sh

# Original config.status is patched to satisfy processing *.in with 'make -j'.
# This bug seems to be fixed in autoconf-2.50.
UNIQUE_POSTFIX=\$\$

EOF
sed 's/conftest/conftest\${UNIQUE_POSTFIX}/g' <config.status >>config.status-t && \
mv config.status-t config.status
chmod +x config.status
# ---------------------------------------------------------------------------

eval my_bindir="`eval echo ${bindir}`"
eval my_mandir="`eval echo ${mandir}`"
eval my_moddir="`eval echo ${FVWM_MODULEDIR}`"; eval my_moddir="$my_moddir"
eval my_datdir="`eval echo ${FVWM_DATADIR}`"

case "$with_gtk" in
  yes) fvwmgtk_msg="
  With GDK Imlib support in FvwmGtk? $with_gdkimlib$problem_gdkimlib
  With GNOME support in FvwmGtk?     $with_gnomelibs$problem_gnomelibs" ;;
  no) fvwmgtk_msg="" ;;
esac

echo "
FVWM Configuration:

  Version:     $VERSION

  Executables: $my_bindir
  Man pages:   $my_mandir
  Modules:     $my_moddir
  Data files:  $my_datdir

  With GNOME Window Manager hints?   $with_gnomehints$problem_gnomehints
  With GTK support for FvwmGtk?      $with_gtk$problem_gtk$fvwmgtk_msg
  With Multibyte support?            $with_multibyte$problem_multibyte
  With ReadLine sup. in FvwmConsole? $with_readline$problem_readline
  With RPlay support in FvwmEvent?   $with_rplay$problem_rplay
  With Shaped window support?        $with_shape$problem_shape
  With Session Management support?   $with_sm$problem_sm
  With Stroke support?               $with_stroke$problem_stroke
  With Xinerama support?             $with_xinerama$problem_xinerama
  With XPM support?                  $with_xpm$problem_xpm
"
case "$with_xinerama_emulation" in
  yes) echo "  Xinerama emulation enabled." ;;
esac
case "$ac_cv_dmalloc" in
  yes) echo "  DMALLOC heap debugging library enabled." ;;
esac
case "$ac_cv_efence" in
  yes) echo "  EFENCE debugging library enabled." ;;
esac
